// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModelScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ModelScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ModelScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ModelScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace ModelSystem {
class Aabb;
class AabbDefaultTypeInternal;
extern AabbDefaultTypeInternal _Aabb_default_instance_;
class AnimationClip;
class AnimationClipDefaultTypeInternal;
extern AnimationClipDefaultTypeInternal _AnimationClip_default_instance_;
class AnimationClip_KeyframesEntry_DoNotUse;
class AnimationClip_KeyframesEntry_DoNotUseDefaultTypeInternal;
extern AnimationClip_KeyframesEntry_DoNotUseDefaultTypeInternal _AnimationClip_KeyframesEntry_DoNotUse_default_instance_;
class BoneData;
class BoneDataDefaultTypeInternal;
extern BoneDataDefaultTypeInternal _BoneData_default_instance_;
class Bound;
class BoundDefaultTypeInternal;
extern BoundDefaultTypeInternal _Bound_default_instance_;
class IndexBuffer;
class IndexBufferDefaultTypeInternal;
extern IndexBufferDefaultTypeInternal _IndexBuffer_default_instance_;
class Indices;
class IndicesDefaultTypeInternal;
extern IndicesDefaultTypeInternal _Indices_default_instance_;
class Keyframe;
class KeyframeDefaultTypeInternal;
extern KeyframeDefaultTypeInternal _Keyframe_default_instance_;
class Keyframes;
class KeyframesDefaultTypeInternal;
extern KeyframesDefaultTypeInternal _Keyframes_default_instance_;
class MeshData;
class MeshDataDefaultTypeInternal;
extern MeshDataDefaultTypeInternal _MeshData_default_instance_;
class Obb;
class ObbDefaultTypeInternal;
extern ObbDefaultTypeInternal _Obb_default_instance_;
class Sphere;
class SphereDefaultTypeInternal;
extern SphereDefaultTypeInternal _Sphere_default_instance_;
class VertexAttribute;
class VertexAttributeDefaultTypeInternal;
extern VertexAttributeDefaultTypeInternal _VertexAttribute_default_instance_;
class VertexBuffer;
class VertexBufferDefaultTypeInternal;
extern VertexBufferDefaultTypeInternal _VertexBuffer_default_instance_;
class Vertices;
class VerticesDefaultTypeInternal;
extern VerticesDefaultTypeInternal _Vertices_default_instance_;
}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::ModelSystem::Aabb* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Aabb>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::AnimationClip* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::AnimationClip>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::AnimationClip_KeyframesEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::AnimationClip_KeyframesEntry_DoNotUse>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::BoneData* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::BoneData>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Bound* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Bound>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::IndexBuffer* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::IndexBuffer>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Indices* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Indices>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Keyframe* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Keyframe>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Keyframes* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Keyframes>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::MeshData* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::MeshData>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Obb* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Obb>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Sphere* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Sphere>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::VertexAttribute* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::VertexAttribute>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::VertexBuffer* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::VertexBuffer>(Arena*);
template<> ::Tiny3D::Script::ModelSystem::Vertices* Arena::CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Vertices>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace ModelSystem {

enum VertexAttribute_Semantic : int {
  VertexAttribute_Semantic_VAS_POSITION = 0,
  VertexAttribute_Semantic_VAS_TEXCOORD = 1,
  VertexAttribute_Semantic_VAS_NORMAL = 2,
  VertexAttribute_Semantic_VAS_TANGENT = 3,
  VertexAttribute_Semantic_VAS_BINORMAL = 4,
  VertexAttribute_Semantic_VAS_DIFFUSE = 5,
  VertexAttribute_Semantic_VAS_SPECULAR = 6,
  VertexAttribute_Semantic_VAS_BLENDINDEX = 7,
  VertexAttribute_Semantic_VAS_BLENDWEIGHT = 8,
  VertexAttribute_Semantic_VertexAttribute_Semantic_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VertexAttribute_Semantic_VertexAttribute_Semantic_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VertexAttribute_Semantic_IsValid(int value);
constexpr VertexAttribute_Semantic VertexAttribute_Semantic_Semantic_MIN = VertexAttribute_Semantic_VAS_POSITION;
constexpr VertexAttribute_Semantic VertexAttribute_Semantic_Semantic_MAX = VertexAttribute_Semantic_VAS_BLENDWEIGHT;
constexpr int VertexAttribute_Semantic_Semantic_ARRAYSIZE = VertexAttribute_Semantic_Semantic_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexAttribute_Semantic_descriptor();
template<typename T>
inline const std::string& VertexAttribute_Semantic_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VertexAttribute_Semantic>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VertexAttribute_Semantic_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VertexAttribute_Semantic_descriptor(), enum_t_value);
}
inline bool VertexAttribute_Semantic_Parse(
    const std::string& name, VertexAttribute_Semantic* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VertexAttribute_Semantic>(
    VertexAttribute_Semantic_descriptor(), name, value);
}
enum VertexAttribute_Type : int {
  VertexAttribute_Type_VAT_FLOAT = 0,
  VertexAttribute_Type_VAT_DOUBLE = 1,
  VertexAttribute_Type_VAT_INT8 = 2,
  VertexAttribute_Type_VAT_INT16 = 3,
  VertexAttribute_Type_VAT_INT32 = 4,
  VertexAttribute_Type_VAT_INT64 = 5,
  VertexAttribute_Type_VertexAttribute_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VertexAttribute_Type_VertexAttribute_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VertexAttribute_Type_IsValid(int value);
constexpr VertexAttribute_Type VertexAttribute_Type_Type_MIN = VertexAttribute_Type_VAT_FLOAT;
constexpr VertexAttribute_Type VertexAttribute_Type_Type_MAX = VertexAttribute_Type_VAT_INT64;
constexpr int VertexAttribute_Type_Type_ARRAYSIZE = VertexAttribute_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VertexAttribute_Type_descriptor();
template<typename T>
inline const std::string& VertexAttribute_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VertexAttribute_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VertexAttribute_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VertexAttribute_Type_descriptor(), enum_t_value);
}
inline bool VertexAttribute_Type_Parse(
    const std::string& name, VertexAttribute_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VertexAttribute_Type>(
    VertexAttribute_Type_descriptor(), name, value);
}
enum Bound_Type : int {
  Bound_Type_BT_SPHERE = 0,
  Bound_Type_BT_AABB = 1,
  Bound_Type_BT_OBB = 2,
  Bound_Type_Bound_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Bound_Type_Bound_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Bound_Type_IsValid(int value);
constexpr Bound_Type Bound_Type_Type_MIN = Bound_Type_BT_SPHERE;
constexpr Bound_Type Bound_Type_Type_MAX = Bound_Type_BT_OBB;
constexpr int Bound_Type_Type_ARRAYSIZE = Bound_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bound_Type_descriptor();
template<typename T>
inline const std::string& Bound_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bound_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bound_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bound_Type_descriptor(), enum_t_value);
}
inline bool Bound_Type_Parse(
    const std::string& name, Bound_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bound_Type>(
    Bound_Type_descriptor(), name, value);
}
enum PrimitiveType : int {
  PT_POINT_LIST = 0,
  PT_LINE_LIST = 1,
  PT_LINE_STRIP = 2,
  PT_TRIANGLE_LIST = 3,
  PT_TRIANGLE_STRIP = 4,
  PT_TRIANGLE_FAN = 5,
  PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PrimitiveType_IsValid(int value);
constexpr PrimitiveType PrimitiveType_MIN = PT_POINT_LIST;
constexpr PrimitiveType PrimitiveType_MAX = PT_TRIANGLE_FAN;
constexpr int PrimitiveType_ARRAYSIZE = PrimitiveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor();
template<typename T>
inline const std::string& PrimitiveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrimitiveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrimitiveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrimitiveType_descriptor(), enum_t_value);
}
inline bool PrimitiveType_Parse(
    const std::string& name, PrimitiveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrimitiveType>(
    PrimitiveType_descriptor(), name, value);
}
// ===================================================================

class VertexAttribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.VertexAttribute) */ {
 public:
  VertexAttribute();
  virtual ~VertexAttribute();

  VertexAttribute(const VertexAttribute& from);
  VertexAttribute(VertexAttribute&& from) noexcept
    : VertexAttribute() {
    *this = ::std::move(from);
  }

  inline VertexAttribute& operator=(const VertexAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexAttribute& operator=(VertexAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexAttribute* internal_default_instance() {
    return reinterpret_cast<const VertexAttribute*>(
               &_VertexAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VertexAttribute& a, VertexAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexAttribute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexAttribute* New() const final {
    return CreateMaybeMessage<VertexAttribute>(nullptr);
  }

  VertexAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexAttribute& from);
  void MergeFrom(const VertexAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.VertexAttribute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VertexAttribute_Semantic Semantic;
  static constexpr Semantic VAS_POSITION =
    VertexAttribute_Semantic_VAS_POSITION;
  static constexpr Semantic VAS_TEXCOORD =
    VertexAttribute_Semantic_VAS_TEXCOORD;
  static constexpr Semantic VAS_NORMAL =
    VertexAttribute_Semantic_VAS_NORMAL;
  static constexpr Semantic VAS_TANGENT =
    VertexAttribute_Semantic_VAS_TANGENT;
  static constexpr Semantic VAS_BINORMAL =
    VertexAttribute_Semantic_VAS_BINORMAL;
  static constexpr Semantic VAS_DIFFUSE =
    VertexAttribute_Semantic_VAS_DIFFUSE;
  static constexpr Semantic VAS_SPECULAR =
    VertexAttribute_Semantic_VAS_SPECULAR;
  static constexpr Semantic VAS_BLENDINDEX =
    VertexAttribute_Semantic_VAS_BLENDINDEX;
  static constexpr Semantic VAS_BLENDWEIGHT =
    VertexAttribute_Semantic_VAS_BLENDWEIGHT;
  static inline bool Semantic_IsValid(int value) {
    return VertexAttribute_Semantic_IsValid(value);
  }
  static constexpr Semantic Semantic_MIN =
    VertexAttribute_Semantic_Semantic_MIN;
  static constexpr Semantic Semantic_MAX =
    VertexAttribute_Semantic_Semantic_MAX;
  static constexpr int Semantic_ARRAYSIZE =
    VertexAttribute_Semantic_Semantic_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Semantic_descriptor() {
    return VertexAttribute_Semantic_descriptor();
  }
  template<typename T>
  static inline const std::string& Semantic_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Semantic>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Semantic_Name.");
    return VertexAttribute_Semantic_Name(enum_t_value);
  }
  static inline bool Semantic_Parse(const std::string& name,
      Semantic* value) {
    return VertexAttribute_Semantic_Parse(name, value);
  }

  typedef VertexAttribute_Type Type;
  static constexpr Type VAT_FLOAT =
    VertexAttribute_Type_VAT_FLOAT;
  static constexpr Type VAT_DOUBLE =
    VertexAttribute_Type_VAT_DOUBLE;
  static constexpr Type VAT_INT8 =
    VertexAttribute_Type_VAT_INT8;
  static constexpr Type VAT_INT16 =
    VertexAttribute_Type_VAT_INT16;
  static constexpr Type VAT_INT32 =
    VertexAttribute_Type_VAT_INT32;
  static constexpr Type VAT_INT64 =
    VertexAttribute_Type_VAT_INT64;
  static inline bool Type_IsValid(int value) {
    return VertexAttribute_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    VertexAttribute_Type_Type_MIN;
  static constexpr Type Type_MAX =
    VertexAttribute_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    VertexAttribute_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return VertexAttribute_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return VertexAttribute_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return VertexAttribute_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSemanticFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
  void clear_semantic();
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic semantic() const;
  void set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value);
  private:
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic _internal_semantic() const;
  void _internal_set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value);
  public:

  // .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
  void clear_type();
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Type type() const;
  void set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value);
  private:
  ::Tiny3D::Script::ModelSystem::VertexAttribute_Type _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.VertexAttribute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int semantic_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Vertices :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Vertices) */ {
 public:
  Vertices();
  virtual ~Vertices();

  Vertices(const Vertices& from);
  Vertices(Vertices&& from) noexcept
    : Vertices() {
    *this = ::std::move(from);
  }

  inline Vertices& operator=(const Vertices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertices& operator=(Vertices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vertices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vertices* internal_default_instance() {
    return reinterpret_cast<const Vertices*>(
               &_Vertices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vertices& a, Vertices& b) {
    a.Swap(&b);
  }
  inline void Swap(Vertices* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vertices* New() const final {
    return CreateMaybeMessage<Vertices>(nullptr);
  }

  Vertices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vertices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vertices& from);
  void MergeFrom(const Vertices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Vertices";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Vertices)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class VertexBuffer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.VertexBuffer) */ {
 public:
  VertexBuffer();
  virtual ~VertexBuffer();

  VertexBuffer(const VertexBuffer& from);
  VertexBuffer(VertexBuffer&& from) noexcept
    : VertexBuffer() {
    *this = ::std::move(from);
  }

  inline VertexBuffer& operator=(const VertexBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexBuffer& operator=(VertexBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexBuffer& default_instance();

  enum VerticesOneofCase {
    kVertices = 2,
    kValues = 3,
    VERTICESONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VertexBuffer* internal_default_instance() {
    return reinterpret_cast<const VertexBuffer*>(
               &_VertexBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VertexBuffer& a, VertexBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexBuffer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexBuffer* New() const final {
    return CreateMaybeMessage<VertexBuffer>(nullptr);
  }

  VertexBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexBuffer& from);
  void MergeFrom(const VertexBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.VertexBuffer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kVerticesFieldNumber = 2,
    kValuesFieldNumber = 3,
  };
  // repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::Tiny3D::Script::ModelSystem::VertexAttribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >*
      mutable_attributes();
  private:
  const ::Tiny3D::Script::ModelSystem::VertexAttribute& _internal_attributes(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexAttribute* _internal_add_attributes();
  public:
  const ::Tiny3D::Script::ModelSystem::VertexAttribute& attributes(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexAttribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >&
      attributes() const;

  // .Tiny3D.Script.ModelSystem.Vertices vertices = 2;
  bool has_vertices() const;
  private:
  bool _internal_has_vertices() const;
  public:
  void clear_vertices();
  const ::Tiny3D::Script::ModelSystem::Vertices& vertices() const;
  ::Tiny3D::Script::ModelSystem::Vertices* release_vertices();
  ::Tiny3D::Script::ModelSystem::Vertices* mutable_vertices();
  void set_allocated_vertices(::Tiny3D::Script::ModelSystem::Vertices* vertices);
  private:
  const ::Tiny3D::Script::ModelSystem::Vertices& _internal_vertices() const;
  ::Tiny3D::Script::ModelSystem::Vertices* _internal_mutable_vertices();
  public:

  // bytes values = 3;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const std::string& values() const;
  void set_values(const std::string& value);
  void set_values(std::string&& value);
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  std::string* mutable_values();
  std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  void clear_VerticesOneof();
  VerticesOneofCase VerticesOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.VertexBuffer)
 private:
  class _Internal;
  void set_has_vertices();
  void set_has_values();

  inline bool has_VerticesOneof() const;
  inline void clear_has_VerticesOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute > attributes_;
  union VerticesOneofUnion {
    VerticesOneofUnion() {}
    ::Tiny3D::Script::ModelSystem::Vertices* vertices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  } VerticesOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Sphere :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Sphere) */ {
 public:
  Sphere();
  virtual ~Sphere();

  Sphere(const Sphere& from);
  Sphere(Sphere&& from) noexcept
    : Sphere() {
    *this = ::std::move(from);
  }

  inline Sphere& operator=(const Sphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sphere& operator=(Sphere&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sphere& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sphere* internal_default_instance() {
    return reinterpret_cast<const Sphere*>(
               &_Sphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Sphere& a, Sphere& b) {
    a.Swap(&b);
  }
  inline void Swap(Sphere* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sphere* New() const final {
    return CreateMaybeMessage<Sphere>(nullptr);
  }

  Sphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sphere>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sphere& from);
  void MergeFrom(const Sphere& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sphere* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Sphere";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .Tiny3D.Script.Vector3 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::Tiny3D::Script::Vector3& center() const;
  ::Tiny3D::Script::Vector3* release_center();
  ::Tiny3D::Script::Vector3* mutable_center();
  void set_allocated_center(::Tiny3D::Script::Vector3* center);
  private:
  const ::Tiny3D::Script::Vector3& _internal_center() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_center();
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Sphere)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::Vector3* center_;
  float radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Aabb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Aabb) */ {
 public:
  Aabb();
  virtual ~Aabb();

  Aabb(const Aabb& from);
  Aabb(Aabb&& from) noexcept
    : Aabb() {
    *this = ::std::move(from);
  }

  inline Aabb& operator=(const Aabb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aabb& operator=(Aabb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Aabb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Aabb* internal_default_instance() {
    return reinterpret_cast<const Aabb*>(
               &_Aabb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Aabb& a, Aabb& b) {
    a.Swap(&b);
  }
  inline void Swap(Aabb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Aabb* New() const final {
    return CreateMaybeMessage<Aabb>(nullptr);
  }

  Aabb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Aabb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Aabb& from);
  void MergeFrom(const Aabb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aabb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Aabb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinXFieldNumber = 1,
    kMaxXFieldNumber = 2,
    kMinYFieldNumber = 3,
    kMaxYFieldNumber = 4,
    kMinZFieldNumber = 5,
    kMaxZFieldNumber = 6,
  };
  // float min_x = 1;
  void clear_min_x();
  float min_x() const;
  void set_min_x(float value);
  private:
  float _internal_min_x() const;
  void _internal_set_min_x(float value);
  public:

  // float max_x = 2;
  void clear_max_x();
  float max_x() const;
  void set_max_x(float value);
  private:
  float _internal_max_x() const;
  void _internal_set_max_x(float value);
  public:

  // float min_y = 3;
  void clear_min_y();
  float min_y() const;
  void set_min_y(float value);
  private:
  float _internal_min_y() const;
  void _internal_set_min_y(float value);
  public:

  // float max_y = 4;
  void clear_max_y();
  float max_y() const;
  void set_max_y(float value);
  private:
  float _internal_max_y() const;
  void _internal_set_max_y(float value);
  public:

  // float min_z = 5;
  void clear_min_z();
  float min_z() const;
  void set_min_z(float value);
  private:
  float _internal_min_z() const;
  void _internal_set_min_z(float value);
  public:

  // float max_z = 6;
  void clear_max_z();
  float max_z() const;
  void set_max_z(float value);
  private:
  float _internal_max_z() const;
  void _internal_set_max_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Aabb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float min_x_;
  float max_x_;
  float min_y_;
  float max_y_;
  float min_z_;
  float max_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Obb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Obb) */ {
 public:
  Obb();
  virtual ~Obb();

  Obb(const Obb& from);
  Obb(Obb&& from) noexcept
    : Obb() {
    *this = ::std::move(from);
  }

  inline Obb& operator=(const Obb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obb& operator=(Obb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obb* internal_default_instance() {
    return reinterpret_cast<const Obb*>(
               &_Obb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Obb& a, Obb& b) {
    a.Swap(&b);
  }
  inline void Swap(Obb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obb* New() const final {
    return CreateMaybeMessage<Obb>(nullptr);
  }

  Obb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obb& from);
  void MergeFrom(const Obb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Obb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 2,
    kExtentFieldNumber = 3,
    kCenterFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.Vector3 axis = 2;
  int axis_size() const;
  private:
  int _internal_axis_size() const;
  public:
  void clear_axis();
  ::Tiny3D::Script::Vector3* mutable_axis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >*
      mutable_axis();
  private:
  const ::Tiny3D::Script::Vector3& _internal_axis(int index) const;
  ::Tiny3D::Script::Vector3* _internal_add_axis();
  public:
  const ::Tiny3D::Script::Vector3& axis(int index) const;
  ::Tiny3D::Script::Vector3* add_axis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >&
      axis() const;

  // repeated float extent = 3;
  int extent_size() const;
  private:
  int _internal_extent_size() const;
  public:
  void clear_extent();
  private:
  float _internal_extent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_extent() const;
  void _internal_add_extent(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_extent();
  public:
  float extent(int index) const;
  void set_extent(int index, float value);
  void add_extent(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      extent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_extent();

  // .Tiny3D.Script.Vector3 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::Tiny3D::Script::Vector3& center() const;
  ::Tiny3D::Script::Vector3* release_center();
  ::Tiny3D::Script::Vector3* mutable_center();
  void set_allocated_center(::Tiny3D::Script::Vector3* center);
  private:
  const ::Tiny3D::Script::Vector3& _internal_center() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_center();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Obb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 > axis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > extent_;
  mutable std::atomic<int> _extent_cached_byte_size_;
  ::Tiny3D::Script::Vector3* center_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Bound :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Bound) */ {
 public:
  Bound();
  virtual ~Bound();

  Bound(const Bound& from);
  Bound(Bound&& from) noexcept
    : Bound() {
    *this = ::std::move(from);
  }

  inline Bound& operator=(const Bound& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bound& operator=(Bound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bound& default_instance();

  enum ValueOfCase {
    kSphere = 2,
    kAabb = 3,
    kObb = 4,
    VALUEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bound* internal_default_instance() {
    return reinterpret_cast<const Bound*>(
               &_Bound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Bound& a, Bound& b) {
    a.Swap(&b);
  }
  inline void Swap(Bound* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bound* New() const final {
    return CreateMaybeMessage<Bound>(nullptr);
  }

  Bound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bound& from);
  void MergeFrom(const Bound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Bound";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bound_Type Type;
  static constexpr Type BT_SPHERE =
    Bound_Type_BT_SPHERE;
  static constexpr Type BT_AABB =
    Bound_Type_BT_AABB;
  static constexpr Type BT_OBB =
    Bound_Type_BT_OBB;
  static inline bool Type_IsValid(int value) {
    return Bound_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Bound_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Bound_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Bound_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Bound_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Bound_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Bound_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSphereFieldNumber = 2,
    kAabbFieldNumber = 3,
    kObbFieldNumber = 4,
  };
  // .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
  void clear_type();
  ::Tiny3D::Script::ModelSystem::Bound_Type type() const;
  void set_type(::Tiny3D::Script::ModelSystem::Bound_Type value);
  private:
  ::Tiny3D::Script::ModelSystem::Bound_Type _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::ModelSystem::Bound_Type value);
  public:

  // .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::Tiny3D::Script::ModelSystem::Sphere& sphere() const;
  ::Tiny3D::Script::ModelSystem::Sphere* release_sphere();
  ::Tiny3D::Script::ModelSystem::Sphere* mutable_sphere();
  void set_allocated_sphere(::Tiny3D::Script::ModelSystem::Sphere* sphere);
  private:
  const ::Tiny3D::Script::ModelSystem::Sphere& _internal_sphere() const;
  ::Tiny3D::Script::ModelSystem::Sphere* _internal_mutable_sphere();
  public:

  // .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
  bool has_aabb() const;
  private:
  bool _internal_has_aabb() const;
  public:
  void clear_aabb();
  const ::Tiny3D::Script::ModelSystem::Aabb& aabb() const;
  ::Tiny3D::Script::ModelSystem::Aabb* release_aabb();
  ::Tiny3D::Script::ModelSystem::Aabb* mutable_aabb();
  void set_allocated_aabb(::Tiny3D::Script::ModelSystem::Aabb* aabb);
  private:
  const ::Tiny3D::Script::ModelSystem::Aabb& _internal_aabb() const;
  ::Tiny3D::Script::ModelSystem::Aabb* _internal_mutable_aabb();
  public:

  // .Tiny3D.Script.ModelSystem.Obb obb = 4;
  bool has_obb() const;
  private:
  bool _internal_has_obb() const;
  public:
  void clear_obb();
  const ::Tiny3D::Script::ModelSystem::Obb& obb() const;
  ::Tiny3D::Script::ModelSystem::Obb* release_obb();
  ::Tiny3D::Script::ModelSystem::Obb* mutable_obb();
  void set_allocated_obb(::Tiny3D::Script::ModelSystem::Obb* obb);
  private:
  const ::Tiny3D::Script::ModelSystem::Obb& _internal_obb() const;
  ::Tiny3D::Script::ModelSystem::Obb* _internal_mutable_obb();
  public:

  void clear_ValueOf();
  ValueOfCase ValueOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Bound)
 private:
  class _Internal;
  void set_has_sphere();
  void set_has_aabb();
  void set_has_obb();

  inline bool has_ValueOf() const;
  inline void clear_has_ValueOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ValueOfUnion {
    ValueOfUnion() {}
    ::Tiny3D::Script::ModelSystem::Sphere* sphere_;
    ::Tiny3D::Script::ModelSystem::Aabb* aabb_;
    ::Tiny3D::Script::ModelSystem::Obb* obb_;
  } ValueOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Indices :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Indices) */ {
 public:
  Indices();
  virtual ~Indices();

  Indices(const Indices& from);
  Indices(Indices&& from) noexcept
    : Indices() {
    *this = ::std::move(from);
  }

  inline Indices& operator=(const Indices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Indices& operator=(Indices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Indices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Indices* internal_default_instance() {
    return reinterpret_cast<const Indices*>(
               &_Indices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Indices& a, Indices& b) {
    a.Swap(&b);
  }
  inline void Swap(Indices* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Indices* New() const final {
    return CreateMaybeMessage<Indices>(nullptr);
  }

  Indices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Indices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Indices& from);
  void MergeFrom(const Indices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Indices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Indices";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated uint32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Indices)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class IndexBuffer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.IndexBuffer) */ {
 public:
  IndexBuffer();
  virtual ~IndexBuffer();

  IndexBuffer(const IndexBuffer& from);
  IndexBuffer(IndexBuffer&& from) noexcept
    : IndexBuffer() {
    *this = ::std::move(from);
  }

  inline IndexBuffer& operator=(const IndexBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexBuffer& operator=(IndexBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexBuffer& default_instance();

  enum IndicesOneofCase {
    kIndices = 6,
    kValues = 7,
    INDICESONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexBuffer* internal_default_instance() {
    return reinterpret_cast<const IndexBuffer*>(
               &_IndexBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IndexBuffer& a, IndexBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexBuffer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexBuffer* New() const final {
    return CreateMaybeMessage<IndexBuffer>(nullptr);
  }

  IndexBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexBuffer& from);
  void MergeFrom(const IndexBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.IndexBuffer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaterialFieldNumber = 4,
    kBoundFieldNumber = 5,
    kIs16BitFieldNumber = 1,
    kPrimitiveTypeFieldNumber = 2,
    kPrimitiveCountFieldNumber = 3,
    kIndicesFieldNumber = 6,
    kValuesFieldNumber = 7,
  };
  // string material = 4;
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // .Tiny3D.Script.ModelSystem.Bound bound = 5;
  bool has_bound() const;
  private:
  bool _internal_has_bound() const;
  public:
  void clear_bound();
  const ::Tiny3D::Script::ModelSystem::Bound& bound() const;
  ::Tiny3D::Script::ModelSystem::Bound* release_bound();
  ::Tiny3D::Script::ModelSystem::Bound* mutable_bound();
  void set_allocated_bound(::Tiny3D::Script::ModelSystem::Bound* bound);
  private:
  const ::Tiny3D::Script::ModelSystem::Bound& _internal_bound() const;
  ::Tiny3D::Script::ModelSystem::Bound* _internal_mutable_bound();
  public:

  // bool is_16bit = 1;
  void clear_is_16bit();
  bool is_16bit() const;
  void set_is_16bit(bool value);
  private:
  bool _internal_is_16bit() const;
  void _internal_set_is_16bit(bool value);
  public:

  // .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
  void clear_primitive_type();
  ::Tiny3D::Script::ModelSystem::PrimitiveType primitive_type() const;
  void set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value);
  private:
  ::Tiny3D::Script::ModelSystem::PrimitiveType _internal_primitive_type() const;
  void _internal_set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value);
  public:

  // uint32 primitive_count = 3;
  void clear_primitive_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 primitive_count() const;
  void set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_primitive_count() const;
  void _internal_set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Tiny3D.Script.ModelSystem.Indices indices = 6;
  bool has_indices() const;
  private:
  bool _internal_has_indices() const;
  public:
  void clear_indices();
  const ::Tiny3D::Script::ModelSystem::Indices& indices() const;
  ::Tiny3D::Script::ModelSystem::Indices* release_indices();
  ::Tiny3D::Script::ModelSystem::Indices* mutable_indices();
  void set_allocated_indices(::Tiny3D::Script::ModelSystem::Indices* indices);
  private:
  const ::Tiny3D::Script::ModelSystem::Indices& _internal_indices() const;
  ::Tiny3D::Script::ModelSystem::Indices* _internal_mutable_indices();
  public:

  // bytes values = 7;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const std::string& values() const;
  void set_values(const std::string& value);
  void set_values(std::string&& value);
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  std::string* mutable_values();
  std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  void clear_IndicesOneof();
  IndicesOneofCase IndicesOneof_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.IndexBuffer)
 private:
  class _Internal;
  void set_has_indices();
  void set_has_values();

  inline bool has_IndicesOneof() const;
  inline void clear_has_IndicesOneof();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::Tiny3D::Script::ModelSystem::Bound* bound_;
  bool is_16bit_;
  int primitive_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 primitive_count_;
  union IndicesOneofUnion {
    IndicesOneofUnion() {}
    ::Tiny3D::Script::ModelSystem::Indices* indices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  } IndicesOneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Keyframe :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Keyframe) */ {
 public:
  Keyframe();
  virtual ~Keyframe();

  Keyframe(const Keyframe& from);
  Keyframe(Keyframe&& from) noexcept
    : Keyframe() {
    *this = ::std::move(from);
  }

  inline Keyframe& operator=(const Keyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keyframe& operator=(Keyframe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keyframe& default_instance();

  enum KeyframeOneOfCase {
    kTranslation = 2,
    kRotation = 3,
    kScaling = 4,
    KEYFRAMEONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keyframe* internal_default_instance() {
    return reinterpret_cast<const Keyframe*>(
               &_Keyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Keyframe& a, Keyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(Keyframe* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Keyframe* New() const final {
    return CreateMaybeMessage<Keyframe>(nullptr);
  }

  Keyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keyframe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keyframe& from);
  void MergeFrom(const Keyframe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keyframe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Keyframe";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTranslationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kScalingFieldNumber = 4,
  };
  // uint32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Tiny3D.Script.Vector3 translation = 2;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::Tiny3D::Script::Vector3& translation() const;
  ::Tiny3D::Script::Vector3* release_translation();
  ::Tiny3D::Script::Vector3* mutable_translation();
  void set_allocated_translation(::Tiny3D::Script::Vector3* translation);
  private:
  const ::Tiny3D::Script::Vector3& _internal_translation() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_translation();
  public:

  // .Tiny3D.Script.Quaternion rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Tiny3D::Script::Quaternion& rotation() const;
  ::Tiny3D::Script::Quaternion* release_rotation();
  ::Tiny3D::Script::Quaternion* mutable_rotation();
  void set_allocated_rotation(::Tiny3D::Script::Quaternion* rotation);
  private:
  const ::Tiny3D::Script::Quaternion& _internal_rotation() const;
  ::Tiny3D::Script::Quaternion* _internal_mutable_rotation();
  public:

  // .Tiny3D.Script.Vector3 scaling = 4;
  bool has_scaling() const;
  private:
  bool _internal_has_scaling() const;
  public:
  void clear_scaling();
  const ::Tiny3D::Script::Vector3& scaling() const;
  ::Tiny3D::Script::Vector3* release_scaling();
  ::Tiny3D::Script::Vector3* mutable_scaling();
  void set_allocated_scaling(::Tiny3D::Script::Vector3* scaling);
  private:
  const ::Tiny3D::Script::Vector3& _internal_scaling() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_scaling();
  public:

  void clear_KeyframeOneOf();
  KeyframeOneOfCase KeyframeOneOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Keyframe)
 private:
  class _Internal;
  void set_has_translation();
  void set_has_rotation();
  void set_has_scaling();

  inline bool has_KeyframeOneOf() const;
  inline void clear_has_KeyframeOneOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  union KeyframeOneOfUnion {
    KeyframeOneOfUnion() {}
    ::Tiny3D::Script::Vector3* translation_;
    ::Tiny3D::Script::Quaternion* rotation_;
    ::Tiny3D::Script::Vector3* scaling_;
  } KeyframeOneOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Keyframes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.Keyframes) */ {
 public:
  Keyframes();
  virtual ~Keyframes();

  Keyframes(const Keyframes& from);
  Keyframes(Keyframes&& from) noexcept
    : Keyframes() {
    *this = ::std::move(from);
  }

  inline Keyframes& operator=(const Keyframes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keyframes& operator=(Keyframes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keyframes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keyframes* internal_default_instance() {
    return reinterpret_cast<const Keyframes*>(
               &_Keyframes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Keyframes& a, Keyframes& b) {
    a.Swap(&b);
  }
  inline void Swap(Keyframes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Keyframes* New() const final {
    return CreateMaybeMessage<Keyframes>(nullptr);
  }

  Keyframes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keyframes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keyframes& from);
  void MergeFrom(const Keyframes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keyframes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.Keyframes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesTFieldNumber = 2,
    kFramesRFieldNumber = 3,
    kFramesSFieldNumber = 4,
  };
  // repeated .Tiny3D.Script.ModelSystem.Keyframe framesT = 2;
  int framest_size() const;
  private:
  int _internal_framest_size() const;
  public:
  void clear_framest();
  ::Tiny3D::Script::ModelSystem::Keyframe* mutable_framest(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
      mutable_framest();
  private:
  const ::Tiny3D::Script::ModelSystem::Keyframe& _internal_framest(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* _internal_add_framest();
  public:
  const ::Tiny3D::Script::ModelSystem::Keyframe& framest(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* add_framest();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
      framest() const;

  // repeated .Tiny3D.Script.ModelSystem.Keyframe framesR = 3;
  int framesr_size() const;
  private:
  int _internal_framesr_size() const;
  public:
  void clear_framesr();
  ::Tiny3D::Script::ModelSystem::Keyframe* mutable_framesr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
      mutable_framesr();
  private:
  const ::Tiny3D::Script::ModelSystem::Keyframe& _internal_framesr(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* _internal_add_framesr();
  public:
  const ::Tiny3D::Script::ModelSystem::Keyframe& framesr(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* add_framesr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
      framesr() const;

  // repeated .Tiny3D.Script.ModelSystem.Keyframe framesS = 4;
  int framess_size() const;
  private:
  int _internal_framess_size() const;
  public:
  void clear_framess();
  ::Tiny3D::Script::ModelSystem::Keyframe* mutable_framess(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
      mutable_framess();
  private:
  const ::Tiny3D::Script::ModelSystem::Keyframe& _internal_framess(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* _internal_add_framess();
  public:
  const ::Tiny3D::Script::ModelSystem::Keyframe& framess(int index) const;
  ::Tiny3D::Script::ModelSystem::Keyframe* add_framess();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
      framess() const;

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.Keyframes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe > framest_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe > framesr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe > framess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class AnimationClip_KeyframesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnimationClip_KeyframesEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::ModelSystem::Keyframes,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AnimationClip_KeyframesEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::ModelSystem::Keyframes,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AnimationClip_KeyframesEntry_DoNotUse();
  AnimationClip_KeyframesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AnimationClip_KeyframesEntry_DoNotUse& other);
  static const AnimationClip_KeyframesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AnimationClip_KeyframesEntry_DoNotUse*>(&_AnimationClip_KeyframesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.ModelSystem.AnimationClip.KeyframesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class AnimationClip :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.AnimationClip) */ {
 public:
  AnimationClip();
  virtual ~AnimationClip();

  AnimationClip(const AnimationClip& from);
  AnimationClip(AnimationClip&& from) noexcept
    : AnimationClip() {
    *this = ::std::move(from);
  }

  inline AnimationClip& operator=(const AnimationClip& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationClip& operator=(AnimationClip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnimationClip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimationClip* internal_default_instance() {
    return reinterpret_cast<const AnimationClip*>(
               &_AnimationClip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AnimationClip& a, AnimationClip& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationClip* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnimationClip* New() const final {
    return CreateMaybeMessage<AnimationClip>(nullptr);
  }

  AnimationClip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnimationClip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnimationClip& from);
  void MergeFrom(const AnimationClip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationClip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.AnimationClip";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 3,
    kNameFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // map<string, .Tiny3D.Script.ModelSystem.Keyframes> keyframes = 3;
  int keyframes_size() const;
  private:
  int _internal_keyframes_size() const;
  public:
  void clear_keyframes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >&
      _internal_keyframes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >*
      _internal_mutable_keyframes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >&
      keyframes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >*
      mutable_keyframes();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.AnimationClip)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AnimationClip_KeyframesEntry_DoNotUse,
      std::string, ::Tiny3D::Script::ModelSystem::Keyframes,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > keyframes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class BoneData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.BoneData) */ {
 public:
  BoneData();
  virtual ~BoneData();

  BoneData(const BoneData& from);
  BoneData(BoneData&& from) noexcept
    : BoneData() {
    *this = ::std::move(from);
  }

  inline BoneData& operator=(const BoneData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoneData& operator=(BoneData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoneData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoneData* internal_default_instance() {
    return reinterpret_cast<const BoneData*>(
               &_BoneData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BoneData& a, BoneData& b) {
    a.Swap(&b);
  }
  inline void Swap(BoneData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoneData* New() const final {
    return CreateMaybeMessage<BoneData>(nullptr);
  }

  BoneData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoneData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoneData& from);
  void MergeFrom(const BoneData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoneData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.BoneData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeUuidFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string node_uuid = 1;
  void clear_node_uuid();
  const std::string& node_uuid() const;
  void set_node_uuid(const std::string& value);
  void set_node_uuid(std::string&& value);
  void set_node_uuid(const char* value);
  void set_node_uuid(const char* value, size_t size);
  std::string* mutable_node_uuid();
  std::string* release_node_uuid();
  void set_allocated_node_uuid(std::string* node_uuid);
  private:
  const std::string& _internal_node_uuid() const;
  void _internal_set_node_uuid(const std::string& value);
  std::string* _internal_mutable_node_uuid();
  public:

  // .Tiny3D.Script.Matrix4 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::Tiny3D::Script::Matrix4& offset() const;
  ::Tiny3D::Script::Matrix4* release_offset();
  ::Tiny3D::Script::Matrix4* mutable_offset();
  void set_allocated_offset(::Tiny3D::Script::Matrix4* offset);
  private:
  const ::Tiny3D::Script::Matrix4& _internal_offset() const;
  ::Tiny3D::Script::Matrix4* _internal_mutable_offset();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.BoneData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_uuid_;
  ::Tiny3D::Script::Matrix4* offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class MeshData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.ModelSystem.MeshData) */ {
 public:
  MeshData();
  virtual ~MeshData();

  MeshData(const MeshData& from);
  MeshData(MeshData&& from) noexcept
    : MeshData() {
    *this = ::std::move(from);
  }

  inline MeshData& operator=(const MeshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshData& operator=(MeshData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshData* internal_default_instance() {
    return reinterpret_cast<const MeshData*>(
               &_MeshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MeshData& a, MeshData& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshData* New() const final {
    return CreateMaybeMessage<MeshData>(nullptr);
  }

  MeshData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshData& from);
  void MergeFrom(const MeshData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.ModelSystem.MeshData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ModelScriptObject_2eproto);
    return ::descriptor_table_ModelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexBuffersFieldNumber = 2,
    kIndexBuffersFieldNumber = 3,
    kBonesFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
  int vertex_buffers_size() const;
  private:
  int _internal_vertex_buffers_size() const;
  public:
  void clear_vertex_buffers();
  ::Tiny3D::Script::ModelSystem::VertexBuffer* mutable_vertex_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >*
      mutable_vertex_buffers();
  private:
  const ::Tiny3D::Script::ModelSystem::VertexBuffer& _internal_vertex_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexBuffer* _internal_add_vertex_buffers();
  public:
  const ::Tiny3D::Script::ModelSystem::VertexBuffer& vertex_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::VertexBuffer* add_vertex_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >&
      vertex_buffers() const;

  // repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
  int index_buffers_size() const;
  private:
  int _internal_index_buffers_size() const;
  public:
  void clear_index_buffers();
  ::Tiny3D::Script::ModelSystem::IndexBuffer* mutable_index_buffers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >*
      mutable_index_buffers();
  private:
  const ::Tiny3D::Script::ModelSystem::IndexBuffer& _internal_index_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::IndexBuffer* _internal_add_index_buffers();
  public:
  const ::Tiny3D::Script::ModelSystem::IndexBuffer& index_buffers(int index) const;
  ::Tiny3D::Script::ModelSystem::IndexBuffer* add_index_buffers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >&
      index_buffers() const;

  // repeated .Tiny3D.Script.ModelSystem.BoneData bones = 4;
  int bones_size() const;
  private:
  int _internal_bones_size() const;
  public:
  void clear_bones();
  ::Tiny3D::Script::ModelSystem::BoneData* mutable_bones(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::BoneData >*
      mutable_bones();
  private:
  const ::Tiny3D::Script::ModelSystem::BoneData& _internal_bones(int index) const;
  ::Tiny3D::Script::ModelSystem::BoneData* _internal_add_bones();
  public:
  const ::Tiny3D::Script::ModelSystem::BoneData& bones(int index) const;
  ::Tiny3D::Script::ModelSystem::BoneData* add_bones();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::BoneData >&
      bones() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.ModelSystem.MeshData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer > vertex_buffers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer > index_buffers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::BoneData > bones_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ModelScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VertexAttribute

// .Tiny3D.Script.ModelSystem.VertexAttribute.Semantic semantic = 1;
inline void VertexAttribute::clear_semantic() {
  semantic_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic VertexAttribute::_internal_semantic() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic >(semantic_);
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic VertexAttribute::semantic() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexAttribute.semantic)
  return _internal_semantic();
}
inline void VertexAttribute::_internal_set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value) {
  
  semantic_ = value;
}
inline void VertexAttribute::set_semantic(::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic value) {
  _internal_set_semantic(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexAttribute.semantic)
}

// .Tiny3D.Script.ModelSystem.VertexAttribute.Type type = 2;
inline void VertexAttribute::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Type VertexAttribute::_internal_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::VertexAttribute_Type >(type_);
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute_Type VertexAttribute::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexAttribute.type)
  return _internal_type();
}
inline void VertexAttribute::_internal_set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value) {
  
  type_ = value;
}
inline void VertexAttribute::set_type(::Tiny3D::Script::ModelSystem::VertexAttribute_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexAttribute.type)
}

// uint32 size = 3;
inline void VertexAttribute::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexAttribute::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VertexAttribute::size() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexAttribute.size)
  return _internal_size();
}
inline void VertexAttribute::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void VertexAttribute::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexAttribute.size)
}

// -------------------------------------------------------------------

// Vertices

// repeated float values = 1;
inline int Vertices::_internal_values_size() const {
  return values_.size();
}
inline int Vertices::values_size() const {
  return _internal_values_size();
}
inline void Vertices::clear_values() {
  values_.Clear();
}
inline float Vertices::_internal_values(int index) const {
  return values_.Get(index);
}
inline float Vertices::values(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Vertices.values)
  return _internal_values(index);
}
inline void Vertices::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Vertices.values)
}
inline void Vertices::_internal_add_values(float value) {
  values_.Add(value);
}
inline void Vertices::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Vertices.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vertices::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vertices::values() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Vertices.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vertices::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vertices::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Vertices.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// VertexBuffer

// repeated .Tiny3D.Script.ModelSystem.VertexAttribute attributes = 1;
inline int VertexBuffer::_internal_attributes_size() const {
  return attributes_.size();
}
inline int VertexBuffer::attributes_size() const {
  return _internal_attributes_size();
}
inline void VertexBuffer::clear_attributes() {
  attributes_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute* VertexBuffer::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >*
VertexBuffer::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return &attributes_;
}
inline const ::Tiny3D::Script::ModelSystem::VertexAttribute& VertexBuffer::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::VertexAttribute& VertexBuffer::attributes(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return _internal_attributes(index);
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute* VertexBuffer::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::Tiny3D::Script::ModelSystem::VertexAttribute* VertexBuffer::add_attributes() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexAttribute >&
VertexBuffer::attributes() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.VertexBuffer.attributes)
  return attributes_;
}

// .Tiny3D.Script.ModelSystem.Vertices vertices = 2;
inline bool VertexBuffer::_internal_has_vertices() const {
  return VerticesOneof_case() == kVertices;
}
inline bool VertexBuffer::has_vertices() const {
  return _internal_has_vertices();
}
inline void VertexBuffer::set_has_vertices() {
  _oneof_case_[0] = kVertices;
}
inline void VertexBuffer::clear_vertices() {
  if (_internal_has_vertices()) {
    delete VerticesOneof_.vertices_;
    clear_has_VerticesOneof();
  }
}
inline ::Tiny3D::Script::ModelSystem::Vertices* VertexBuffer::release_vertices() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  if (_internal_has_vertices()) {
    clear_has_VerticesOneof();
      ::Tiny3D::Script::ModelSystem::Vertices* temp = VerticesOneof_.vertices_;
    VerticesOneof_.vertices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Vertices& VertexBuffer::_internal_vertices() const {
  return _internal_has_vertices()
      ? *VerticesOneof_.vertices_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Vertices*>(&::Tiny3D::Script::ModelSystem::_Vertices_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Vertices& VertexBuffer::vertices() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return _internal_vertices();
}
inline ::Tiny3D::Script::ModelSystem::Vertices* VertexBuffer::_internal_mutable_vertices() {
  if (!_internal_has_vertices()) {
    clear_VerticesOneof();
    set_has_vertices();
    VerticesOneof_.vertices_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Vertices >(
        GetArenaNoVirtual());
  }
  return VerticesOneof_.vertices_;
}
inline ::Tiny3D::Script::ModelSystem::Vertices* VertexBuffer::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.VertexBuffer.vertices)
  return _internal_mutable_vertices();
}

// bytes values = 3;
inline bool VertexBuffer::_internal_has_values() const {
  return VerticesOneof_case() == kValues;
}
inline void VertexBuffer::set_has_values() {
  _oneof_case_[0] = kValues;
}
inline void VertexBuffer::clear_values() {
  if (_internal_has_values()) {
    VerticesOneof_.values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_VerticesOneof();
  }
}
inline const std::string& VertexBuffer::values() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.VertexBuffer.values)
  return _internal_values();
}
inline void VertexBuffer::set_values(const std::string& value) {
  _internal_set_values(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexBuffer.values)
}
inline std::string* VertexBuffer::mutable_values() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.VertexBuffer.values)
  return _internal_mutable_values();
}
inline const std::string& VertexBuffer::_internal_values() const {
  if (_internal_has_values()) {
    return VerticesOneof_.values_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VertexBuffer::_internal_set_values(const std::string& value) {
  if (!_internal_has_values()) {
    clear_VerticesOneof();
    set_has_values();
    VerticesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  VerticesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VertexBuffer::set_values(std::string&& value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.VertexBuffer.values)
  if (!_internal_has_values()) {
    clear_VerticesOneof();
    set_has_values();
    VerticesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  VerticesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.VertexBuffer.values)
}
inline void VertexBuffer::set_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_values()) {
    clear_VerticesOneof();
    set_has_values();
    VerticesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  VerticesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.VertexBuffer.values)
}
inline void VertexBuffer::set_values(const void* value, size_t size) {
  if (!_internal_has_values()) {
    clear_VerticesOneof();
    set_has_values();
    VerticesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  VerticesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.VertexBuffer.values)
}
inline std::string* VertexBuffer::_internal_mutable_values() {
  if (!_internal_has_values()) {
    clear_VerticesOneof();
    set_has_values();
    VerticesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return VerticesOneof_.values_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VertexBuffer::release_values() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.VertexBuffer.values)
  if (_internal_has_values()) {
    clear_has_VerticesOneof();
    return VerticesOneof_.values_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void VertexBuffer::set_allocated_values(std::string* values) {
  if (has_VerticesOneof()) {
    clear_VerticesOneof();
  }
  if (values != nullptr) {
    set_has_values();
    VerticesOneof_.values_.UnsafeSetDefault(values);
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.VertexBuffer.values)
}

inline bool VertexBuffer::has_VerticesOneof() const {
  return VerticesOneof_case() != VERTICESONEOF_NOT_SET;
}
inline void VertexBuffer::clear_has_VerticesOneof() {
  _oneof_case_[0] = VERTICESONEOF_NOT_SET;
}
inline VertexBuffer::VerticesOneofCase VertexBuffer::VerticesOneof_case() const {
  return VertexBuffer::VerticesOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Sphere

// .Tiny3D.Script.Vector3 center = 1;
inline bool Sphere::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Sphere::has_center() const {
  return _internal_has_center();
}
inline const ::Tiny3D::Script::Vector3& Sphere::_internal_center() const {
  const ::Tiny3D::Script::Vector3* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Sphere::center() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Sphere.center)
  return _internal_center();
}
inline ::Tiny3D::Script::Vector3* Sphere::release_center() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Sphere.center)
  
  ::Tiny3D::Script::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Sphere::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::Tiny3D::Script::Vector3* Sphere::mutable_center() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Sphere.center)
  return _internal_mutable_center();
}
inline void Sphere::set_allocated_center(::Tiny3D::Script::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Sphere.center)
}

// float radius = 2;
inline void Sphere::clear_radius() {
  radius_ = 0;
}
inline float Sphere::_internal_radius() const {
  return radius_;
}
inline float Sphere::radius() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Sphere.radius)
  return _internal_radius();
}
inline void Sphere::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void Sphere::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Sphere.radius)
}

// -------------------------------------------------------------------

// Aabb

// float min_x = 1;
inline void Aabb::clear_min_x() {
  min_x_ = 0;
}
inline float Aabb::_internal_min_x() const {
  return min_x_;
}
inline float Aabb::min_x() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.min_x)
  return _internal_min_x();
}
inline void Aabb::_internal_set_min_x(float value) {
  
  min_x_ = value;
}
inline void Aabb::set_min_x(float value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.min_x)
}

// float max_x = 2;
inline void Aabb::clear_max_x() {
  max_x_ = 0;
}
inline float Aabb::_internal_max_x() const {
  return max_x_;
}
inline float Aabb::max_x() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.max_x)
  return _internal_max_x();
}
inline void Aabb::_internal_set_max_x(float value) {
  
  max_x_ = value;
}
inline void Aabb::set_max_x(float value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.max_x)
}

// float min_y = 3;
inline void Aabb::clear_min_y() {
  min_y_ = 0;
}
inline float Aabb::_internal_min_y() const {
  return min_y_;
}
inline float Aabb::min_y() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.min_y)
  return _internal_min_y();
}
inline void Aabb::_internal_set_min_y(float value) {
  
  min_y_ = value;
}
inline void Aabb::set_min_y(float value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.min_y)
}

// float max_y = 4;
inline void Aabb::clear_max_y() {
  max_y_ = 0;
}
inline float Aabb::_internal_max_y() const {
  return max_y_;
}
inline float Aabb::max_y() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.max_y)
  return _internal_max_y();
}
inline void Aabb::_internal_set_max_y(float value) {
  
  max_y_ = value;
}
inline void Aabb::set_max_y(float value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.max_y)
}

// float min_z = 5;
inline void Aabb::clear_min_z() {
  min_z_ = 0;
}
inline float Aabb::_internal_min_z() const {
  return min_z_;
}
inline float Aabb::min_z() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.min_z)
  return _internal_min_z();
}
inline void Aabb::_internal_set_min_z(float value) {
  
  min_z_ = value;
}
inline void Aabb::set_min_z(float value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.min_z)
}

// float max_z = 6;
inline void Aabb::clear_max_z() {
  max_z_ = 0;
}
inline float Aabb::_internal_max_z() const {
  return max_z_;
}
inline float Aabb::max_z() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Aabb.max_z)
  return _internal_max_z();
}
inline void Aabb::_internal_set_max_z(float value) {
  
  max_z_ = value;
}
inline void Aabb::set_max_z(float value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Aabb.max_z)
}

// -------------------------------------------------------------------

// Obb

// .Tiny3D.Script.Vector3 center = 1;
inline bool Obb::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Obb::has_center() const {
  return _internal_has_center();
}
inline const ::Tiny3D::Script::Vector3& Obb::_internal_center() const {
  const ::Tiny3D::Script::Vector3* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Obb::center() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Obb.center)
  return _internal_center();
}
inline ::Tiny3D::Script::Vector3* Obb::release_center() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Obb.center)
  
  ::Tiny3D::Script::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Obb::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::Tiny3D::Script::Vector3* Obb::mutable_center() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Obb.center)
  return _internal_mutable_center();
}
inline void Obb::set_allocated_center(::Tiny3D::Script::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.Obb.center)
}

// repeated .Tiny3D.Script.Vector3 axis = 2;
inline int Obb::_internal_axis_size() const {
  return axis_.size();
}
inline int Obb::axis_size() const {
  return _internal_axis_size();
}
inline ::Tiny3D::Script::Vector3* Obb::mutable_axis(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Obb.axis)
  return axis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >*
Obb::mutable_axis() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Obb.axis)
  return &axis_;
}
inline const ::Tiny3D::Script::Vector3& Obb::_internal_axis(int index) const {
  return axis_.Get(index);
}
inline const ::Tiny3D::Script::Vector3& Obb::axis(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Obb.axis)
  return _internal_axis(index);
}
inline ::Tiny3D::Script::Vector3* Obb::_internal_add_axis() {
  return axis_.Add();
}
inline ::Tiny3D::Script::Vector3* Obb::add_axis() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Obb.axis)
  return _internal_add_axis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::Vector3 >&
Obb::axis() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Obb.axis)
  return axis_;
}

// repeated float extent = 3;
inline int Obb::_internal_extent_size() const {
  return extent_.size();
}
inline int Obb::extent_size() const {
  return _internal_extent_size();
}
inline void Obb::clear_extent() {
  extent_.Clear();
}
inline float Obb::_internal_extent(int index) const {
  return extent_.Get(index);
}
inline float Obb::extent(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Obb.extent)
  return _internal_extent(index);
}
inline void Obb::set_extent(int index, float value) {
  extent_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Obb.extent)
}
inline void Obb::_internal_add_extent(float value) {
  extent_.Add(value);
}
inline void Obb::add_extent(float value) {
  _internal_add_extent(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Obb.extent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obb::_internal_extent() const {
  return extent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Obb::extent() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Obb.extent)
  return _internal_extent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obb::_internal_mutable_extent() {
  return &extent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Obb::mutable_extent() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Obb.extent)
  return _internal_mutable_extent();
}

// -------------------------------------------------------------------

// Bound

// .Tiny3D.Script.ModelSystem.Bound.Type type = 1;
inline void Bound::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::Bound_Type Bound::_internal_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::Bound_Type >(type_);
}
inline ::Tiny3D::Script::ModelSystem::Bound_Type Bound::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.type)
  return _internal_type();
}
inline void Bound::_internal_set_type(::Tiny3D::Script::ModelSystem::Bound_Type value) {
  
  type_ = value;
}
inline void Bound::set_type(::Tiny3D::Script::ModelSystem::Bound_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Bound.type)
}

// .Tiny3D.Script.ModelSystem.Sphere sphere = 2;
inline bool Bound::_internal_has_sphere() const {
  return ValueOf_case() == kSphere;
}
inline bool Bound::has_sphere() const {
  return _internal_has_sphere();
}
inline void Bound::set_has_sphere() {
  _oneof_case_[0] = kSphere;
}
inline void Bound::clear_sphere() {
  if (_internal_has_sphere()) {
    delete ValueOf_.sphere_;
    clear_has_ValueOf();
  }
}
inline ::Tiny3D::Script::ModelSystem::Sphere* Bound::release_sphere() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Bound.sphere)
  if (_internal_has_sphere()) {
    clear_has_ValueOf();
      ::Tiny3D::Script::ModelSystem::Sphere* temp = ValueOf_.sphere_;
    ValueOf_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Sphere& Bound::_internal_sphere() const {
  return _internal_has_sphere()
      ? *ValueOf_.sphere_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Sphere*>(&::Tiny3D::Script::ModelSystem::_Sphere_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Sphere& Bound::sphere() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.sphere)
  return _internal_sphere();
}
inline ::Tiny3D::Script::ModelSystem::Sphere* Bound::_internal_mutable_sphere() {
  if (!_internal_has_sphere()) {
    clear_ValueOf();
    set_has_sphere();
    ValueOf_.sphere_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Sphere >(
        GetArenaNoVirtual());
  }
  return ValueOf_.sphere_;
}
inline ::Tiny3D::Script::ModelSystem::Sphere* Bound::mutable_sphere() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Bound.sphere)
  return _internal_mutable_sphere();
}

// .Tiny3D.Script.ModelSystem.Aabb aabb = 3;
inline bool Bound::_internal_has_aabb() const {
  return ValueOf_case() == kAabb;
}
inline bool Bound::has_aabb() const {
  return _internal_has_aabb();
}
inline void Bound::set_has_aabb() {
  _oneof_case_[0] = kAabb;
}
inline void Bound::clear_aabb() {
  if (_internal_has_aabb()) {
    delete ValueOf_.aabb_;
    clear_has_ValueOf();
  }
}
inline ::Tiny3D::Script::ModelSystem::Aabb* Bound::release_aabb() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Bound.aabb)
  if (_internal_has_aabb()) {
    clear_has_ValueOf();
      ::Tiny3D::Script::ModelSystem::Aabb* temp = ValueOf_.aabb_;
    ValueOf_.aabb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Aabb& Bound::_internal_aabb() const {
  return _internal_has_aabb()
      ? *ValueOf_.aabb_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Aabb*>(&::Tiny3D::Script::ModelSystem::_Aabb_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Aabb& Bound::aabb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.aabb)
  return _internal_aabb();
}
inline ::Tiny3D::Script::ModelSystem::Aabb* Bound::_internal_mutable_aabb() {
  if (!_internal_has_aabb()) {
    clear_ValueOf();
    set_has_aabb();
    ValueOf_.aabb_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Aabb >(
        GetArenaNoVirtual());
  }
  return ValueOf_.aabb_;
}
inline ::Tiny3D::Script::ModelSystem::Aabb* Bound::mutable_aabb() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Bound.aabb)
  return _internal_mutable_aabb();
}

// .Tiny3D.Script.ModelSystem.Obb obb = 4;
inline bool Bound::_internal_has_obb() const {
  return ValueOf_case() == kObb;
}
inline bool Bound::has_obb() const {
  return _internal_has_obb();
}
inline void Bound::set_has_obb() {
  _oneof_case_[0] = kObb;
}
inline void Bound::clear_obb() {
  if (_internal_has_obb()) {
    delete ValueOf_.obb_;
    clear_has_ValueOf();
  }
}
inline ::Tiny3D::Script::ModelSystem::Obb* Bound::release_obb() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Bound.obb)
  if (_internal_has_obb()) {
    clear_has_ValueOf();
      ::Tiny3D::Script::ModelSystem::Obb* temp = ValueOf_.obb_;
    ValueOf_.obb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Obb& Bound::_internal_obb() const {
  return _internal_has_obb()
      ? *ValueOf_.obb_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Obb*>(&::Tiny3D::Script::ModelSystem::_Obb_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Obb& Bound::obb() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Bound.obb)
  return _internal_obb();
}
inline ::Tiny3D::Script::ModelSystem::Obb* Bound::_internal_mutable_obb() {
  if (!_internal_has_obb()) {
    clear_ValueOf();
    set_has_obb();
    ValueOf_.obb_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Obb >(
        GetArenaNoVirtual());
  }
  return ValueOf_.obb_;
}
inline ::Tiny3D::Script::ModelSystem::Obb* Bound::mutable_obb() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Bound.obb)
  return _internal_mutable_obb();
}

inline bool Bound::has_ValueOf() const {
  return ValueOf_case() != VALUEOF_NOT_SET;
}
inline void Bound::clear_has_ValueOf() {
  _oneof_case_[0] = VALUEOF_NOT_SET;
}
inline Bound::ValueOfCase Bound::ValueOf_case() const {
  return Bound::ValueOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Indices

// repeated uint32 values = 1;
inline int Indices::_internal_values_size() const {
  return values_.size();
}
inline int Indices::values_size() const {
  return _internal_values_size();
}
inline void Indices::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Indices::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Indices::values(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Indices.values)
  return _internal_values(index);
}
inline void Indices::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Indices.values)
}
inline void Indices::_internal_add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  values_.Add(value);
}
inline void Indices::add_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Indices.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Indices::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Indices::values() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Indices.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Indices::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Indices::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Indices.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// IndexBuffer

// bool is_16bit = 1;
inline void IndexBuffer::clear_is_16bit() {
  is_16bit_ = false;
}
inline bool IndexBuffer::_internal_is_16bit() const {
  return is_16bit_;
}
inline bool IndexBuffer::is_16bit() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.is_16bit)
  return _internal_is_16bit();
}
inline void IndexBuffer::_internal_set_is_16bit(bool value) {
  
  is_16bit_ = value;
}
inline void IndexBuffer::set_is_16bit(bool value) {
  _internal_set_is_16bit(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.is_16bit)
}

// .Tiny3D.Script.ModelSystem.PrimitiveType primitive_type = 2;
inline void IndexBuffer::clear_primitive_type() {
  primitive_type_ = 0;
}
inline ::Tiny3D::Script::ModelSystem::PrimitiveType IndexBuffer::_internal_primitive_type() const {
  return static_cast< ::Tiny3D::Script::ModelSystem::PrimitiveType >(primitive_type_);
}
inline ::Tiny3D::Script::ModelSystem::PrimitiveType IndexBuffer::primitive_type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_type)
  return _internal_primitive_type();
}
inline void IndexBuffer::_internal_set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value) {
  
  primitive_type_ = value;
}
inline void IndexBuffer::set_primitive_type(::Tiny3D::Script::ModelSystem::PrimitiveType value) {
  _internal_set_primitive_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_type)
}

// uint32 primitive_count = 3;
inline void IndexBuffer::clear_primitive_count() {
  primitive_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexBuffer::_internal_primitive_count() const {
  return primitive_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IndexBuffer::primitive_count() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_count)
  return _internal_primitive_count();
}
inline void IndexBuffer::_internal_set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  primitive_count_ = value;
}
inline void IndexBuffer::set_primitive_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_primitive_count(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.primitive_count)
}

// string material = 4;
inline void IndexBuffer::clear_material() {
  material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IndexBuffer::material() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.material)
  return _internal_material();
}
inline void IndexBuffer::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline std::string* IndexBuffer::mutable_material() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.IndexBuffer.material)
  return _internal_mutable_material();
}
inline const std::string& IndexBuffer::_internal_material() const {
  return material_.GetNoArena();
}
inline void IndexBuffer::_internal_set_material(const std::string& value) {
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexBuffer::set_material(std::string&& value) {
  
  material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline void IndexBuffer::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline void IndexBuffer::set_material(const char* value, size_t size) {
  
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}
inline std::string* IndexBuffer::_internal_mutable_material() {
  
  return material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexBuffer::release_material() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.IndexBuffer.material)
  
  return material_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IndexBuffer::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    
  } else {
    
  }
  material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.IndexBuffer.material)
}

// .Tiny3D.Script.ModelSystem.Bound bound = 5;
inline bool IndexBuffer::_internal_has_bound() const {
  return this != internal_default_instance() && bound_ != nullptr;
}
inline bool IndexBuffer::has_bound() const {
  return _internal_has_bound();
}
inline void IndexBuffer::clear_bound() {
  if (GetArenaNoVirtual() == nullptr && bound_ != nullptr) {
    delete bound_;
  }
  bound_ = nullptr;
}
inline const ::Tiny3D::Script::ModelSystem::Bound& IndexBuffer::_internal_bound() const {
  const ::Tiny3D::Script::ModelSystem::Bound* p = bound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::ModelSystem::Bound*>(
      &::Tiny3D::Script::ModelSystem::_Bound_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Bound& IndexBuffer::bound() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
  return _internal_bound();
}
inline ::Tiny3D::Script::ModelSystem::Bound* IndexBuffer::release_bound() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
  
  ::Tiny3D::Script::ModelSystem::Bound* temp = bound_;
  bound_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::ModelSystem::Bound* IndexBuffer::_internal_mutable_bound() {
  
  if (bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::ModelSystem::Bound>(GetArenaNoVirtual());
    bound_ = p;
  }
  return bound_;
}
inline ::Tiny3D::Script::ModelSystem::Bound* IndexBuffer::mutable_bound() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
  return _internal_mutable_bound();
}
inline void IndexBuffer::set_allocated_bound(::Tiny3D::Script::ModelSystem::Bound* bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bound_;
  }
  if (bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bound, submessage_arena);
    }
    
  } else {
    
  }
  bound_ = bound;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.IndexBuffer.bound)
}

// .Tiny3D.Script.ModelSystem.Indices indices = 6;
inline bool IndexBuffer::_internal_has_indices() const {
  return IndicesOneof_case() == kIndices;
}
inline bool IndexBuffer::has_indices() const {
  return _internal_has_indices();
}
inline void IndexBuffer::set_has_indices() {
  _oneof_case_[0] = kIndices;
}
inline void IndexBuffer::clear_indices() {
  if (_internal_has_indices()) {
    delete IndicesOneof_.indices_;
    clear_has_IndicesOneof();
  }
}
inline ::Tiny3D::Script::ModelSystem::Indices* IndexBuffer::release_indices() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
  if (_internal_has_indices()) {
    clear_has_IndicesOneof();
      ::Tiny3D::Script::ModelSystem::Indices* temp = IndicesOneof_.indices_;
    IndicesOneof_.indices_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::ModelSystem::Indices& IndexBuffer::_internal_indices() const {
  return _internal_has_indices()
      ? *IndicesOneof_.indices_
      : *reinterpret_cast< ::Tiny3D::Script::ModelSystem::Indices*>(&::Tiny3D::Script::ModelSystem::_Indices_default_instance_);
}
inline const ::Tiny3D::Script::ModelSystem::Indices& IndexBuffer::indices() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
  return _internal_indices();
}
inline ::Tiny3D::Script::ModelSystem::Indices* IndexBuffer::_internal_mutable_indices() {
  if (!_internal_has_indices()) {
    clear_IndicesOneof();
    set_has_indices();
    IndicesOneof_.indices_ = CreateMaybeMessage< ::Tiny3D::Script::ModelSystem::Indices >(
        GetArenaNoVirtual());
  }
  return IndicesOneof_.indices_;
}
inline ::Tiny3D::Script::ModelSystem::Indices* IndexBuffer::mutable_indices() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.IndexBuffer.indices)
  return _internal_mutable_indices();
}

// bytes values = 7;
inline bool IndexBuffer::_internal_has_values() const {
  return IndicesOneof_case() == kValues;
}
inline void IndexBuffer::set_has_values() {
  _oneof_case_[0] = kValues;
}
inline void IndexBuffer::clear_values() {
  if (_internal_has_values()) {
    IndicesOneof_.values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_IndicesOneof();
  }
}
inline const std::string& IndexBuffer::values() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.IndexBuffer.values)
  return _internal_values();
}
inline void IndexBuffer::set_values(const std::string& value) {
  _internal_set_values(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.values)
}
inline std::string* IndexBuffer::mutable_values() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.IndexBuffer.values)
  return _internal_mutable_values();
}
inline const std::string& IndexBuffer::_internal_values() const {
  if (_internal_has_values()) {
    return IndicesOneof_.values_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void IndexBuffer::_internal_set_values(const std::string& value) {
  if (!_internal_has_values()) {
    clear_IndicesOneof();
    set_has_values();
    IndicesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  IndicesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IndexBuffer::set_values(std::string&& value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.IndexBuffer.values)
  if (!_internal_has_values()) {
    clear_IndicesOneof();
    set_has_values();
    IndicesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  IndicesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.IndexBuffer.values)
}
inline void IndexBuffer::set_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_values()) {
    clear_IndicesOneof();
    set_has_values();
    IndicesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  IndicesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.IndexBuffer.values)
}
inline void IndexBuffer::set_values(const void* value, size_t size) {
  if (!_internal_has_values()) {
    clear_IndicesOneof();
    set_has_values();
    IndicesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  IndicesOneof_.values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.IndexBuffer.values)
}
inline std::string* IndexBuffer::_internal_mutable_values() {
  if (!_internal_has_values()) {
    clear_IndicesOneof();
    set_has_values();
    IndicesOneof_.values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return IndicesOneof_.values_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IndexBuffer::release_values() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.IndexBuffer.values)
  if (_internal_has_values()) {
    clear_has_IndicesOneof();
    return IndicesOneof_.values_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void IndexBuffer::set_allocated_values(std::string* values) {
  if (has_IndicesOneof()) {
    clear_IndicesOneof();
  }
  if (values != nullptr) {
    set_has_values();
    IndicesOneof_.values_.UnsafeSetDefault(values);
  }
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.IndexBuffer.values)
}

inline bool IndexBuffer::has_IndicesOneof() const {
  return IndicesOneof_case() != INDICESONEOF_NOT_SET;
}
inline void IndexBuffer::clear_has_IndicesOneof() {
  _oneof_case_[0] = INDICESONEOF_NOT_SET;
}
inline IndexBuffer::IndicesOneofCase IndexBuffer::IndicesOneof_case() const {
  return IndexBuffer::IndicesOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Keyframe

// uint32 time = 1;
inline void Keyframe::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Keyframe::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Keyframe::time() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.time)
  return _internal_time();
}
inline void Keyframe::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Keyframe::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.Keyframe.time)
}

// .Tiny3D.Script.Vector3 translation = 2;
inline bool Keyframe::_internal_has_translation() const {
  return KeyframeOneOf_case() == kTranslation;
}
inline bool Keyframe::has_translation() const {
  return _internal_has_translation();
}
inline void Keyframe::set_has_translation() {
  _oneof_case_[0] = kTranslation;
}
inline ::Tiny3D::Script::Vector3* Keyframe::release_translation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Keyframe.translation)
  if (_internal_has_translation()) {
    clear_has_KeyframeOneOf();
      ::Tiny3D::Script::Vector3* temp = KeyframeOneOf_.translation_;
    KeyframeOneOf_.translation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3& Keyframe::_internal_translation() const {
  return _internal_has_translation()
      ? *KeyframeOneOf_.translation_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3*>(&::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Keyframe::translation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.translation)
  return _internal_translation();
}
inline ::Tiny3D::Script::Vector3* Keyframe::_internal_mutable_translation() {
  if (!_internal_has_translation()) {
    clear_KeyframeOneOf();
    set_has_translation();
    KeyframeOneOf_.translation_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3 >(
        GetArenaNoVirtual());
  }
  return KeyframeOneOf_.translation_;
}
inline ::Tiny3D::Script::Vector3* Keyframe::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframe.translation)
  return _internal_mutable_translation();
}

// .Tiny3D.Script.Quaternion rotation = 3;
inline bool Keyframe::_internal_has_rotation() const {
  return KeyframeOneOf_case() == kRotation;
}
inline bool Keyframe::has_rotation() const {
  return _internal_has_rotation();
}
inline void Keyframe::set_has_rotation() {
  _oneof_case_[0] = kRotation;
}
inline ::Tiny3D::Script::Quaternion* Keyframe::release_rotation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Keyframe.rotation)
  if (_internal_has_rotation()) {
    clear_has_KeyframeOneOf();
      ::Tiny3D::Script::Quaternion* temp = KeyframeOneOf_.rotation_;
    KeyframeOneOf_.rotation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Quaternion& Keyframe::_internal_rotation() const {
  return _internal_has_rotation()
      ? *KeyframeOneOf_.rotation_
      : *reinterpret_cast< ::Tiny3D::Script::Quaternion*>(&::Tiny3D::Script::_Quaternion_default_instance_);
}
inline const ::Tiny3D::Script::Quaternion& Keyframe::rotation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.rotation)
  return _internal_rotation();
}
inline ::Tiny3D::Script::Quaternion* Keyframe::_internal_mutable_rotation() {
  if (!_internal_has_rotation()) {
    clear_KeyframeOneOf();
    set_has_rotation();
    KeyframeOneOf_.rotation_ = CreateMaybeMessage< ::Tiny3D::Script::Quaternion >(
        GetArenaNoVirtual());
  }
  return KeyframeOneOf_.rotation_;
}
inline ::Tiny3D::Script::Quaternion* Keyframe::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframe.rotation)
  return _internal_mutable_rotation();
}

// .Tiny3D.Script.Vector3 scaling = 4;
inline bool Keyframe::_internal_has_scaling() const {
  return KeyframeOneOf_case() == kScaling;
}
inline bool Keyframe::has_scaling() const {
  return _internal_has_scaling();
}
inline void Keyframe::set_has_scaling() {
  _oneof_case_[0] = kScaling;
}
inline ::Tiny3D::Script::Vector3* Keyframe::release_scaling() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.Keyframe.scaling)
  if (_internal_has_scaling()) {
    clear_has_KeyframeOneOf();
      ::Tiny3D::Script::Vector3* temp = KeyframeOneOf_.scaling_;
    KeyframeOneOf_.scaling_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::Vector3& Keyframe::_internal_scaling() const {
  return _internal_has_scaling()
      ? *KeyframeOneOf_.scaling_
      : *reinterpret_cast< ::Tiny3D::Script::Vector3*>(&::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Keyframe::scaling() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframe.scaling)
  return _internal_scaling();
}
inline ::Tiny3D::Script::Vector3* Keyframe::_internal_mutable_scaling() {
  if (!_internal_has_scaling()) {
    clear_KeyframeOneOf();
    set_has_scaling();
    KeyframeOneOf_.scaling_ = CreateMaybeMessage< ::Tiny3D::Script::Vector3 >(
        GetArenaNoVirtual());
  }
  return KeyframeOneOf_.scaling_;
}
inline ::Tiny3D::Script::Vector3* Keyframe::mutable_scaling() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframe.scaling)
  return _internal_mutable_scaling();
}

inline bool Keyframe::has_KeyframeOneOf() const {
  return KeyframeOneOf_case() != KEYFRAMEONEOF_NOT_SET;
}
inline void Keyframe::clear_has_KeyframeOneOf() {
  _oneof_case_[0] = KEYFRAMEONEOF_NOT_SET;
}
inline Keyframe::KeyframeOneOfCase Keyframe::KeyframeOneOf_case() const {
  return Keyframe::KeyframeOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Keyframes

// repeated .Tiny3D.Script.ModelSystem.Keyframe framesT = 2;
inline int Keyframes::_internal_framest_size() const {
  return framest_.size();
}
inline int Keyframes::framest_size() const {
  return _internal_framest_size();
}
inline void Keyframes::clear_framest() {
  framest_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::mutable_framest(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframes.framesT)
  return framest_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
Keyframes::mutable_framest() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Keyframes.framesT)
  return &framest_;
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& Keyframes::_internal_framest(int index) const {
  return framest_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& Keyframes::framest(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframes.framesT)
  return _internal_framest(index);
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::_internal_add_framest() {
  return framest_.Add();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::add_framest() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Keyframes.framesT)
  return _internal_add_framest();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
Keyframes::framest() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Keyframes.framesT)
  return framest_;
}

// repeated .Tiny3D.Script.ModelSystem.Keyframe framesR = 3;
inline int Keyframes::_internal_framesr_size() const {
  return framesr_.size();
}
inline int Keyframes::framesr_size() const {
  return _internal_framesr_size();
}
inline void Keyframes::clear_framesr() {
  framesr_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::mutable_framesr(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframes.framesR)
  return framesr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
Keyframes::mutable_framesr() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Keyframes.framesR)
  return &framesr_;
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& Keyframes::_internal_framesr(int index) const {
  return framesr_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& Keyframes::framesr(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframes.framesR)
  return _internal_framesr(index);
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::_internal_add_framesr() {
  return framesr_.Add();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::add_framesr() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Keyframes.framesR)
  return _internal_add_framesr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
Keyframes::framesr() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Keyframes.framesR)
  return framesr_;
}

// repeated .Tiny3D.Script.ModelSystem.Keyframe framesS = 4;
inline int Keyframes::_internal_framess_size() const {
  return framess_.size();
}
inline int Keyframes::framess_size() const {
  return _internal_framess_size();
}
inline void Keyframes::clear_framess() {
  framess_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::mutable_framess(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.Keyframes.framesS)
  return framess_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >*
Keyframes::mutable_framess() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.Keyframes.framesS)
  return &framess_;
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& Keyframes::_internal_framess(int index) const {
  return framess_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::Keyframe& Keyframes::framess(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.Keyframes.framesS)
  return _internal_framess(index);
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::_internal_add_framess() {
  return framess_.Add();
}
inline ::Tiny3D::Script::ModelSystem::Keyframe* Keyframes::add_framess() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.Keyframes.framesS)
  return _internal_add_framess();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::Keyframe >&
Keyframes::framess() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.Keyframes.framesS)
  return framess_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnimationClip

// string name = 1;
inline void AnimationClip::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AnimationClip::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.AnimationClip.name)
  return _internal_name();
}
inline void AnimationClip::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline std::string* AnimationClip::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.AnimationClip.name)
  return _internal_mutable_name();
}
inline const std::string& AnimationClip::_internal_name() const {
  return name_.GetNoArena();
}
inline void AnimationClip::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AnimationClip::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline void AnimationClip::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline void AnimationClip::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.AnimationClip.name)
}
inline std::string* AnimationClip::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AnimationClip::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.AnimationClip.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AnimationClip::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.AnimationClip.name)
}

// uint32 duration = 2;
inline void AnimationClip::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnimationClip::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnimationClip::duration() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.AnimationClip.duration)
  return _internal_duration();
}
inline void AnimationClip::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void AnimationClip::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.AnimationClip.duration)
}

// map<string, .Tiny3D.Script.ModelSystem.Keyframes> keyframes = 3;
inline int AnimationClip::_internal_keyframes_size() const {
  return keyframes_.size();
}
inline int AnimationClip::keyframes_size() const {
  return _internal_keyframes_size();
}
inline void AnimationClip::clear_keyframes() {
  keyframes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >&
AnimationClip::_internal_keyframes() const {
  return keyframes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >&
AnimationClip::keyframes() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return _internal_keyframes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >*
AnimationClip::_internal_mutable_keyframes() {
  return keyframes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::Keyframes >*
AnimationClip::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.ModelSystem.AnimationClip.keyframes)
  return _internal_mutable_keyframes();
}

// -------------------------------------------------------------------

// BoneData

// string node_uuid = 1;
inline void BoneData::clear_node_uuid() {
  node_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BoneData::node_uuid() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
  return _internal_node_uuid();
}
inline void BoneData::set_node_uuid(const std::string& value) {
  _internal_set_node_uuid(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
}
inline std::string* BoneData::mutable_node_uuid() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
  return _internal_mutable_node_uuid();
}
inline const std::string& BoneData::_internal_node_uuid() const {
  return node_uuid_.GetNoArena();
}
inline void BoneData::_internal_set_node_uuid(const std::string& value) {
  
  node_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BoneData::set_node_uuid(std::string&& value) {
  
  node_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
}
inline void BoneData::set_node_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
}
inline void BoneData::set_node_uuid(const char* value, size_t size) {
  
  node_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
}
inline std::string* BoneData::_internal_mutable_node_uuid() {
  
  return node_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BoneData::release_node_uuid() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
  
  return node_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BoneData::set_allocated_node_uuid(std::string* node_uuid) {
  if (node_uuid != nullptr) {
    
  } else {
    
  }
  node_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_uuid);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.BoneData.node_uuid)
}

// .Tiny3D.Script.Matrix4 offset = 2;
inline bool BoneData::_internal_has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline bool BoneData::has_offset() const {
  return _internal_has_offset();
}
inline const ::Tiny3D::Script::Matrix4& BoneData::_internal_offset() const {
  const ::Tiny3D::Script::Matrix4* p = offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Matrix4*>(
      &::Tiny3D::Script::_Matrix4_default_instance_);
}
inline const ::Tiny3D::Script::Matrix4& BoneData::offset() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.BoneData.offset)
  return _internal_offset();
}
inline ::Tiny3D::Script::Matrix4* BoneData::release_offset() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.BoneData.offset)
  
  ::Tiny3D::Script::Matrix4* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Matrix4* BoneData::_internal_mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Matrix4>(GetArenaNoVirtual());
    offset_ = p;
  }
  return offset_;
}
inline ::Tiny3D::Script::Matrix4* BoneData::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.BoneData.offset)
  return _internal_mutable_offset();
}
inline void BoneData::set_allocated_offset(::Tiny3D::Script::Matrix4* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.BoneData.offset)
}

// -------------------------------------------------------------------

// MeshData

// string name = 1;
inline void MeshData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MeshData::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.name)
  return _internal_name();
}
inline void MeshData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline std::string* MeshData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.name)
  return _internal_mutable_name();
}
inline const std::string& MeshData::_internal_name() const {
  return name_.GetNoArena();
}
inline void MeshData::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MeshData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline void MeshData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline void MeshData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.ModelSystem.MeshData.name)
}
inline std::string* MeshData::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MeshData::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.ModelSystem.MeshData.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MeshData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.ModelSystem.MeshData.name)
}

// repeated .Tiny3D.Script.ModelSystem.VertexBuffer vertex_buffers = 2;
inline int MeshData::_internal_vertex_buffers_size() const {
  return vertex_buffers_.size();
}
inline int MeshData::vertex_buffers_size() const {
  return _internal_vertex_buffers_size();
}
inline void MeshData::clear_vertex_buffers() {
  vertex_buffers_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::VertexBuffer* MeshData::mutable_vertex_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return vertex_buffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >*
MeshData::mutable_vertex_buffers() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return &vertex_buffers_;
}
inline const ::Tiny3D::Script::ModelSystem::VertexBuffer& MeshData::_internal_vertex_buffers(int index) const {
  return vertex_buffers_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::VertexBuffer& MeshData::vertex_buffers(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return _internal_vertex_buffers(index);
}
inline ::Tiny3D::Script::ModelSystem::VertexBuffer* MeshData::_internal_add_vertex_buffers() {
  return vertex_buffers_.Add();
}
inline ::Tiny3D::Script::ModelSystem::VertexBuffer* MeshData::add_vertex_buffers() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return _internal_add_vertex_buffers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::VertexBuffer >&
MeshData::vertex_buffers() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.MeshData.vertex_buffers)
  return vertex_buffers_;
}

// repeated .Tiny3D.Script.ModelSystem.IndexBuffer index_buffers = 3;
inline int MeshData::_internal_index_buffers_size() const {
  return index_buffers_.size();
}
inline int MeshData::index_buffers_size() const {
  return _internal_index_buffers_size();
}
inline void MeshData::clear_index_buffers() {
  index_buffers_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::IndexBuffer* MeshData::mutable_index_buffers(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return index_buffers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >*
MeshData::mutable_index_buffers() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return &index_buffers_;
}
inline const ::Tiny3D::Script::ModelSystem::IndexBuffer& MeshData::_internal_index_buffers(int index) const {
  return index_buffers_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::IndexBuffer& MeshData::index_buffers(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return _internal_index_buffers(index);
}
inline ::Tiny3D::Script::ModelSystem::IndexBuffer* MeshData::_internal_add_index_buffers() {
  return index_buffers_.Add();
}
inline ::Tiny3D::Script::ModelSystem::IndexBuffer* MeshData::add_index_buffers() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return _internal_add_index_buffers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::IndexBuffer >&
MeshData::index_buffers() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.MeshData.index_buffers)
  return index_buffers_;
}

// repeated .Tiny3D.Script.ModelSystem.BoneData bones = 4;
inline int MeshData::_internal_bones_size() const {
  return bones_.size();
}
inline int MeshData::bones_size() const {
  return _internal_bones_size();
}
inline void MeshData::clear_bones() {
  bones_.Clear();
}
inline ::Tiny3D::Script::ModelSystem::BoneData* MeshData::mutable_bones(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.ModelSystem.MeshData.bones)
  return bones_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::BoneData >*
MeshData::mutable_bones() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.ModelSystem.MeshData.bones)
  return &bones_;
}
inline const ::Tiny3D::Script::ModelSystem::BoneData& MeshData::_internal_bones(int index) const {
  return bones_.Get(index);
}
inline const ::Tiny3D::Script::ModelSystem::BoneData& MeshData::bones(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.ModelSystem.MeshData.bones)
  return _internal_bones(index);
}
inline ::Tiny3D::Script::ModelSystem::BoneData* MeshData::_internal_add_bones() {
  return bones_.Add();
}
inline ::Tiny3D::Script::ModelSystem::BoneData* MeshData::add_bones() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.ModelSystem.MeshData.bones)
  return _internal_add_bones();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::ModelSystem::BoneData >&
MeshData::bones() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.ModelSystem.MeshData.bones)
  return bones_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ModelSystem
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic>() {
  return ::Tiny3D::Script::ModelSystem::VertexAttribute_Semantic_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::VertexAttribute_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::VertexAttribute_Type>() {
  return ::Tiny3D::Script::ModelSystem::VertexAttribute_Type_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::Bound_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::Bound_Type>() {
  return ::Tiny3D::Script::ModelSystem::Bound_Type_descriptor();
}
template <> struct is_proto_enum< ::Tiny3D::Script::ModelSystem::PrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::ModelSystem::PrimitiveType>() {
  return ::Tiny3D::Script::ModelSystem::PrimitiveType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ModelScriptObject_2eproto
