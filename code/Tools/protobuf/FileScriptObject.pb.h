// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FileScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FileScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MaterialScriptObject.pb.h"
#include "ModelScriptObject.pb.h"
#include "LevelScriptObject.pb.h"
#include "MetaScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FileScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FileScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace FileFormat {
class FileHeader;
class FileHeaderDefaultTypeInternal;
extern FileHeaderDefaultTypeInternal _FileHeader_default_instance_;
class FileLevel;
class FileLevelDefaultTypeInternal;
extern FileLevelDefaultTypeInternal _FileLevel_default_instance_;
class FileLevelData;
class FileLevelDataDefaultTypeInternal;
extern FileLevelDataDefaultTypeInternal _FileLevelData_default_instance_;
class FileLevelData_AnimationsEntry_DoNotUse;
class FileLevelData_AnimationsEntry_DoNotUseDefaultTypeInternal;
extern FileLevelData_AnimationsEntry_DoNotUseDefaultTypeInternal _FileLevelData_AnimationsEntry_DoNotUse_default_instance_;
class FileLevelData_MeshesEntry_DoNotUse;
class FileLevelData_MeshesEntry_DoNotUseDefaultTypeInternal;
extern FileLevelData_MeshesEntry_DoNotUseDefaultTypeInternal _FileLevelData_MeshesEntry_DoNotUse_default_instance_;
class FileLevelData_NodesEntry_DoNotUse;
class FileLevelData_NodesEntry_DoNotUseDefaultTypeInternal;
extern FileLevelData_NodesEntry_DoNotUseDefaultTypeInternal _FileLevelData_NodesEntry_DoNotUse_default_instance_;
class FileMaterial;
class FileMaterialDefaultTypeInternal;
extern FileMaterialDefaultTypeInternal _FileMaterial_default_instance_;
class FileMeta;
class FileMetaDefaultTypeInternal;
extern FileMetaDefaultTypeInternal _FileMeta_default_instance_;
}  // namespace FileFormat
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::FileFormat::FileHeader* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileHeader>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileLevel* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileLevel>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileLevelData* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileLevelData>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileLevelData_AnimationsEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileLevelData_AnimationsEntry_DoNotUse>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileLevelData_MeshesEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileLevelData_MeshesEntry_DoNotUse>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileLevelData_NodesEntry_DoNotUse* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileLevelData_NodesEntry_DoNotUse>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileMaterial* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileMaterial>(Arena*);
template<> ::Tiny3D::Script::FileFormat::FileMeta* Arena::CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace FileFormat {

enum FileHeader_FileType : int {
  FileHeader_FileType_Material = 0,
  FileHeader_FileType_Level = 1,
  FileHeader_FileType_Meta = 2,
  FileHeader_FileType_FileHeader_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileHeader_FileType_FileHeader_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileHeader_FileType_IsValid(int value);
constexpr FileHeader_FileType FileHeader_FileType_FileType_MIN = FileHeader_FileType_Material;
constexpr FileHeader_FileType FileHeader_FileType_FileType_MAX = FileHeader_FileType_Meta;
constexpr int FileHeader_FileType_FileType_ARRAYSIZE = FileHeader_FileType_FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileHeader_FileType_descriptor();
template<typename T>
inline const std::string& FileHeader_FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileHeader_FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileHeader_FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileHeader_FileType_descriptor(), enum_t_value);
}
inline bool FileHeader_FileType_Parse(
    const std::string& name, FileHeader_FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileHeader_FileType>(
    FileHeader_FileType_descriptor(), name, value);
}
// ===================================================================

class FileHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.FileFormat.FileHeader) */ {
 public:
  FileHeader();
  virtual ~FileHeader();

  FileHeader(const FileHeader& from);
  FileHeader(FileHeader&& from) noexcept
    : FileHeader() {
    *this = ::std::move(from);
  }

  inline FileHeader& operator=(const FileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHeader& operator=(FileHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileHeader* internal_default_instance() {
    return reinterpret_cast<const FileHeader*>(
               &_FileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileHeader& a, FileHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileHeader* New() const final {
    return CreateMaybeMessage<FileHeader>(nullptr);
  }

  FileHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileHeader& from);
  void MergeFrom(const FileHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.FileFormat.FileHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FileHeader_FileType FileType;
  static constexpr FileType Material =
    FileHeader_FileType_Material;
  static constexpr FileType Level =
    FileHeader_FileType_Level;
  static constexpr FileType Meta =
    FileHeader_FileType_Meta;
  static inline bool FileType_IsValid(int value) {
    return FileHeader_FileType_IsValid(value);
  }
  static constexpr FileType FileType_MIN =
    FileHeader_FileType_FileType_MIN;
  static constexpr FileType FileType_MAX =
    FileHeader_FileType_FileType_MAX;
  static constexpr int FileType_ARRAYSIZE =
    FileHeader_FileType_FileType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileType_descriptor() {
    return FileHeader_FileType_descriptor();
  }
  template<typename T>
  static inline const std::string& FileType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileType_Name.");
    return FileHeader_FileType_Name(enum_t_value);
  }
  static inline bool FileType_Parse(const std::string& name,
      FileType* value) {
    return FileHeader_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMagicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string magic = 1;
  void clear_magic();
  const std::string& magic() const;
  void set_magic(const std::string& value);
  void set_magic(std::string&& value);
  void set_magic(const char* value);
  void set_magic(const char* value, size_t size);
  std::string* mutable_magic();
  std::string* release_magic();
  void set_allocated_magic(std::string* magic);
  private:
  const std::string& _internal_magic() const;
  void _internal_set_magic(const std::string& value);
  std::string* _internal_mutable_magic();
  public:

  // .Tiny3D.Script.FileFormat.FileHeader.FileType type = 2;
  void clear_type();
  ::Tiny3D::Script::FileFormat::FileHeader_FileType type() const;
  void set_type(::Tiny3D::Script::FileFormat::FileHeader_FileType value);
  private:
  ::Tiny3D::Script::FileFormat::FileHeader_FileType _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::FileFormat::FileHeader_FileType value);
  public:

  // fixed32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.FileFormat.FileHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magic_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileScriptObject_2eproto;
};
// -------------------------------------------------------------------

class FileMaterial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.FileFormat.FileMaterial) */ {
 public:
  FileMaterial();
  virtual ~FileMaterial();

  FileMaterial(const FileMaterial& from);
  FileMaterial(FileMaterial&& from) noexcept
    : FileMaterial() {
    *this = ::std::move(from);
  }

  inline FileMaterial& operator=(const FileMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMaterial& operator=(FileMaterial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileMaterial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMaterial* internal_default_instance() {
    return reinterpret_cast<const FileMaterial*>(
               &_FileMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileMaterial& a, FileMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMaterial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileMaterial* New() const final {
    return CreateMaybeMessage<FileMaterial>(nullptr);
  }

  FileMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileMaterial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileMaterial& from);
  void MergeFrom(const FileMaterial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMaterial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.FileFormat.FileMaterial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMaterialFieldNumber = 2,
  };
  // .Tiny3D.Script.FileFormat.FileHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::FileFormat::FileHeader& header() const;
  ::Tiny3D::Script::FileFormat::FileHeader* release_header();
  ::Tiny3D::Script::FileFormat::FileHeader* mutable_header();
  void set_allocated_header(::Tiny3D::Script::FileFormat::FileHeader* header);
  private:
  const ::Tiny3D::Script::FileFormat::FileHeader& _internal_header() const;
  ::Tiny3D::Script::FileFormat::FileHeader* _internal_mutable_header();
  public:

  // .Tiny3D.Script.MaterialSystem.Material material = 2;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const ::Tiny3D::Script::MaterialSystem::Material& material() const;
  ::Tiny3D::Script::MaterialSystem::Material* release_material();
  ::Tiny3D::Script::MaterialSystem::Material* mutable_material();
  void set_allocated_material(::Tiny3D::Script::MaterialSystem::Material* material);
  private:
  const ::Tiny3D::Script::MaterialSystem::Material& _internal_material() const;
  ::Tiny3D::Script::MaterialSystem::Material* _internal_mutable_material();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.FileFormat.FileMaterial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::FileFormat::FileHeader* header_;
  ::Tiny3D::Script::MaterialSystem::Material* material_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileScriptObject_2eproto;
};
// -------------------------------------------------------------------

class FileMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.FileFormat.FileMeta) */ {
 public:
  FileMeta();
  virtual ~FileMeta();

  FileMeta(const FileMeta& from);
  FileMeta(FileMeta&& from) noexcept
    : FileMeta() {
    *this = ::std::move(from);
  }

  inline FileMeta& operator=(const FileMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMeta& operator=(FileMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMeta* internal_default_instance() {
    return reinterpret_cast<const FileMeta*>(
               &_FileMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileMeta& a, FileMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileMeta* New() const final {
    return CreateMaybeMessage<FileMeta>(nullptr);
  }

  FileMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileMeta& from);
  void MergeFrom(const FileMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.FileFormat.FileMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMetaFieldNumber = 2,
  };
  // .Tiny3D.Script.FileFormat.FileHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::FileFormat::FileHeader& header() const;
  ::Tiny3D::Script::FileFormat::FileHeader* release_header();
  ::Tiny3D::Script::FileFormat::FileHeader* mutable_header();
  void set_allocated_header(::Tiny3D::Script::FileFormat::FileHeader* header);
  private:
  const ::Tiny3D::Script::FileFormat::FileHeader& _internal_header() const;
  ::Tiny3D::Script::FileFormat::FileHeader* _internal_mutable_header();
  public:

  // .Tiny3D.Script.MetaSystem.MetaData meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::Tiny3D::Script::MetaSystem::MetaData& meta() const;
  ::Tiny3D::Script::MetaSystem::MetaData* release_meta();
  ::Tiny3D::Script::MetaSystem::MetaData* mutable_meta();
  void set_allocated_meta(::Tiny3D::Script::MetaSystem::MetaData* meta);
  private:
  const ::Tiny3D::Script::MetaSystem::MetaData& _internal_meta() const;
  ::Tiny3D::Script::MetaSystem::MetaData* _internal_mutable_meta();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.FileFormat.FileMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::FileFormat::FileHeader* header_;
  ::Tiny3D::Script::MetaSystem::MetaData* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileScriptObject_2eproto;
};
// -------------------------------------------------------------------

class FileLevelData_NodesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileLevelData_NodesEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::LevelSystem::Node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileLevelData_NodesEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::LevelSystem::Node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FileLevelData_NodesEntry_DoNotUse();
  FileLevelData_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileLevelData_NodesEntry_DoNotUse& other);
  static const FileLevelData_NodesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileLevelData_NodesEntry_DoNotUse*>(&_FileLevelData_NodesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.FileFormat.FileLevelData.NodesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class FileLevelData_MeshesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileLevelData_MeshesEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::ModelSystem::MeshData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileLevelData_MeshesEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::ModelSystem::MeshData,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FileLevelData_MeshesEntry_DoNotUse();
  FileLevelData_MeshesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileLevelData_MeshesEntry_DoNotUse& other);
  static const FileLevelData_MeshesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileLevelData_MeshesEntry_DoNotUse*>(&_FileLevelData_MeshesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.FileFormat.FileLevelData.MeshesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class FileLevelData_AnimationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileLevelData_AnimationsEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::ModelSystem::AnimationClip,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileLevelData_AnimationsEntry_DoNotUse, 
    std::string, ::Tiny3D::Script::ModelSystem::AnimationClip,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  FileLevelData_AnimationsEntry_DoNotUse();
  FileLevelData_AnimationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileLevelData_AnimationsEntry_DoNotUse& other);
  static const FileLevelData_AnimationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileLevelData_AnimationsEntry_DoNotUse*>(&_FileLevelData_AnimationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Tiny3D.Script.FileFormat.FileLevelData.AnimationsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class FileLevelData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.FileFormat.FileLevelData) */ {
 public:
  FileLevelData();
  virtual ~FileLevelData();

  FileLevelData(const FileLevelData& from);
  FileLevelData(FileLevelData&& from) noexcept
    : FileLevelData() {
    *this = ::std::move(from);
  }

  inline FileLevelData& operator=(const FileLevelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileLevelData& operator=(FileLevelData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileLevelData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileLevelData* internal_default_instance() {
    return reinterpret_cast<const FileLevelData*>(
               &_FileLevelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FileLevelData& a, FileLevelData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileLevelData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileLevelData* New() const final {
    return CreateMaybeMessage<FileLevelData>(nullptr);
  }

  FileLevelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileLevelData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileLevelData& from);
  void MergeFrom(const FileLevelData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileLevelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.FileFormat.FileLevelData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kMeshesFieldNumber = 3,
    kAnimationsFieldNumber = 4,
    kRootFieldNumber = 1,
  };
  // map<string, .Tiny3D.Script.LevelSystem.Node> nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >&
      _internal_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >*
      _internal_mutable_nodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >&
      nodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >*
      mutable_nodes();

  // map<string, .Tiny3D.Script.ModelSystem.MeshData> meshes = 3;
  int meshes_size() const;
  private:
  int _internal_meshes_size() const;
  public:
  void clear_meshes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >&
      _internal_meshes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >*
      _internal_mutable_meshes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >&
      meshes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >*
      mutable_meshes();

  // map<string, .Tiny3D.Script.ModelSystem.AnimationClip> animations = 4;
  int animations_size() const;
  private:
  int _internal_animations_size() const;
  public:
  void clear_animations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >&
      _internal_animations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >*
      _internal_mutable_animations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >&
      animations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >*
      mutable_animations();

  // string root = 1;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const char* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.FileFormat.FileLevelData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FileLevelData_NodesEntry_DoNotUse,
      std::string, ::Tiny3D::Script::LevelSystem::Node,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FileLevelData_MeshesEntry_DoNotUse,
      std::string, ::Tiny3D::Script::ModelSystem::MeshData,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > meshes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FileLevelData_AnimationsEntry_DoNotUse,
      std::string, ::Tiny3D::Script::ModelSystem::AnimationClip,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > animations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileScriptObject_2eproto;
};
// -------------------------------------------------------------------

class FileLevel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.FileFormat.FileLevel) */ {
 public:
  FileLevel();
  virtual ~FileLevel();

  FileLevel(const FileLevel& from);
  FileLevel(FileLevel&& from) noexcept
    : FileLevel() {
    *this = ::std::move(from);
  }

  inline FileLevel& operator=(const FileLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileLevel& operator=(FileLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileLevel* internal_default_instance() {
    return reinterpret_cast<const FileLevel*>(
               &_FileLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileLevel& a, FileLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(FileLevel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileLevel* New() const final {
    return CreateMaybeMessage<FileLevel>(nullptr);
  }

  FileLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileLevel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileLevel& from);
  void MergeFrom(const FileLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.FileFormat.FileLevel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileScriptObject_2eproto);
    return ::descriptor_table_FileScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .Tiny3D.Script.FileFormat.FileHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Tiny3D::Script::FileFormat::FileHeader& header() const;
  ::Tiny3D::Script::FileFormat::FileHeader* release_header();
  ::Tiny3D::Script::FileFormat::FileHeader* mutable_header();
  void set_allocated_header(::Tiny3D::Script::FileFormat::FileHeader* header);
  private:
  const ::Tiny3D::Script::FileFormat::FileHeader& _internal_header() const;
  ::Tiny3D::Script::FileFormat::FileHeader* _internal_mutable_header();
  public:

  // .Tiny3D.Script.FileFormat.FileLevelData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Tiny3D::Script::FileFormat::FileLevelData& data() const;
  ::Tiny3D::Script::FileFormat::FileLevelData* release_data();
  ::Tiny3D::Script::FileFormat::FileLevelData* mutable_data();
  void set_allocated_data(::Tiny3D::Script::FileFormat::FileLevelData* data);
  private:
  const ::Tiny3D::Script::FileFormat::FileLevelData& _internal_data() const;
  ::Tiny3D::Script::FileFormat::FileLevelData* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.FileFormat.FileLevel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::FileFormat::FileHeader* header_;
  ::Tiny3D::Script::FileFormat::FileLevelData* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileHeader

// string magic = 1;
inline void FileHeader::clear_magic() {
  magic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileHeader::magic() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileHeader.magic)
  return _internal_magic();
}
inline void FileHeader::set_magic(const std::string& value) {
  _internal_set_magic(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.FileFormat.FileHeader.magic)
}
inline std::string* FileHeader::mutable_magic() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileHeader.magic)
  return _internal_mutable_magic();
}
inline const std::string& FileHeader::_internal_magic() const {
  return magic_.GetNoArena();
}
inline void FileHeader::_internal_set_magic(const std::string& value) {
  
  magic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileHeader::set_magic(std::string&& value) {
  
  magic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.FileFormat.FileHeader.magic)
}
inline void FileHeader::set_magic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  magic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.FileFormat.FileHeader.magic)
}
inline void FileHeader::set_magic(const char* value, size_t size) {
  
  magic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.FileFormat.FileHeader.magic)
}
inline std::string* FileHeader::_internal_mutable_magic() {
  
  return magic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileHeader::release_magic() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileHeader.magic)
  
  return magic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileHeader::set_allocated_magic(std::string* magic) {
  if (magic != nullptr) {
    
  } else {
    
  }
  magic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magic);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileHeader.magic)
}

// .Tiny3D.Script.FileFormat.FileHeader.FileType type = 2;
inline void FileHeader::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::FileFormat::FileHeader_FileType FileHeader::_internal_type() const {
  return static_cast< ::Tiny3D::Script::FileFormat::FileHeader_FileType >(type_);
}
inline ::Tiny3D::Script::FileFormat::FileHeader_FileType FileHeader::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileHeader.type)
  return _internal_type();
}
inline void FileHeader::_internal_set_type(::Tiny3D::Script::FileFormat::FileHeader_FileType value) {
  
  type_ = value;
}
inline void FileHeader::set_type(::Tiny3D::Script::FileFormat::FileHeader_FileType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.FileFormat.FileHeader.type)
}

// fixed32 version = 3;
inline void FileHeader::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileHeader::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FileHeader::version() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileHeader.version)
  return _internal_version();
}
inline void FileHeader::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void FileHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.FileFormat.FileHeader.version)
}

// -------------------------------------------------------------------

// FileMaterial

// .Tiny3D.Script.FileFormat.FileHeader header = 1;
inline bool FileMaterial::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FileMaterial::has_header() const {
  return _internal_has_header();
}
inline void FileMaterial::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::FileFormat::FileHeader& FileMaterial::_internal_header() const {
  const ::Tiny3D::Script::FileFormat::FileHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::FileFormat::FileHeader*>(
      &::Tiny3D::Script::FileFormat::_FileHeader_default_instance_);
}
inline const ::Tiny3D::Script::FileFormat::FileHeader& FileMaterial::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileMaterial.header)
  return _internal_header();
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileMaterial::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileMaterial.header)
  
  ::Tiny3D::Script::FileFormat::FileHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileMaterial::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileMaterial::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileMaterial.header)
  return _internal_mutable_header();
}
inline void FileMaterial::set_allocated_header(::Tiny3D::Script::FileFormat::FileHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileMaterial.header)
}

// .Tiny3D.Script.MaterialSystem.Material material = 2;
inline bool FileMaterial::_internal_has_material() const {
  return this != internal_default_instance() && material_ != nullptr;
}
inline bool FileMaterial::has_material() const {
  return _internal_has_material();
}
inline const ::Tiny3D::Script::MaterialSystem::Material& FileMaterial::_internal_material() const {
  const ::Tiny3D::Script::MaterialSystem::Material* p = material_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MaterialSystem::Material*>(
      &::Tiny3D::Script::MaterialSystem::_Material_default_instance_);
}
inline const ::Tiny3D::Script::MaterialSystem::Material& FileMaterial::material() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileMaterial.material)
  return _internal_material();
}
inline ::Tiny3D::Script::MaterialSystem::Material* FileMaterial::release_material() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileMaterial.material)
  
  ::Tiny3D::Script::MaterialSystem::Material* temp = material_;
  material_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MaterialSystem::Material* FileMaterial::_internal_mutable_material() {
  
  if (material_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MaterialSystem::Material>(GetArenaNoVirtual());
    material_ = p;
  }
  return material_;
}
inline ::Tiny3D::Script::MaterialSystem::Material* FileMaterial::mutable_material() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileMaterial.material)
  return _internal_mutable_material();
}
inline void FileMaterial::set_allocated_material(::Tiny3D::Script::MaterialSystem::Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_);
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    
  } else {
    
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileMaterial.material)
}

// -------------------------------------------------------------------

// FileMeta

// .Tiny3D.Script.FileFormat.FileHeader header = 1;
inline bool FileMeta::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FileMeta::has_header() const {
  return _internal_has_header();
}
inline void FileMeta::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::FileFormat::FileHeader& FileMeta::_internal_header() const {
  const ::Tiny3D::Script::FileFormat::FileHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::FileFormat::FileHeader*>(
      &::Tiny3D::Script::FileFormat::_FileHeader_default_instance_);
}
inline const ::Tiny3D::Script::FileFormat::FileHeader& FileMeta::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileMeta.header)
  return _internal_header();
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileMeta::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileMeta.header)
  
  ::Tiny3D::Script::FileFormat::FileHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileMeta::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileMeta::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileMeta.header)
  return _internal_mutable_header();
}
inline void FileMeta::set_allocated_header(::Tiny3D::Script::FileFormat::FileHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileMeta.header)
}

// .Tiny3D.Script.MetaSystem.MetaData meta = 2;
inline bool FileMeta::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool FileMeta::has_meta() const {
  return _internal_has_meta();
}
inline const ::Tiny3D::Script::MetaSystem::MetaData& FileMeta::_internal_meta() const {
  const ::Tiny3D::Script::MetaSystem::MetaData* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::MetaSystem::MetaData*>(
      &::Tiny3D::Script::MetaSystem::_MetaData_default_instance_);
}
inline const ::Tiny3D::Script::MetaSystem::MetaData& FileMeta::meta() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileMeta.meta)
  return _internal_meta();
}
inline ::Tiny3D::Script::MetaSystem::MetaData* FileMeta::release_meta() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileMeta.meta)
  
  ::Tiny3D::Script::MetaSystem::MetaData* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::MetaSystem::MetaData* FileMeta::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::MetaSystem::MetaData>(GetArenaNoVirtual());
    meta_ = p;
  }
  return meta_;
}
inline ::Tiny3D::Script::MetaSystem::MetaData* FileMeta::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileMeta.meta)
  return _internal_mutable_meta();
}
inline void FileMeta::set_allocated_meta(::Tiny3D::Script::MetaSystem::MetaData* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileMeta.meta)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileLevelData

// string root = 1;
inline void FileLevelData::clear_root() {
  root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileLevelData::root() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileLevelData.root)
  return _internal_root();
}
inline void FileLevelData::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.FileFormat.FileLevelData.root)
}
inline std::string* FileLevelData::mutable_root() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileLevelData.root)
  return _internal_mutable_root();
}
inline const std::string& FileLevelData::_internal_root() const {
  return root_.GetNoArena();
}
inline void FileLevelData::_internal_set_root(const std::string& value) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FileLevelData::set_root(std::string&& value) {
  
  root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.FileFormat.FileLevelData.root)
}
inline void FileLevelData::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.FileFormat.FileLevelData.root)
}
inline void FileLevelData::set_root(const char* value, size_t size) {
  
  root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.FileFormat.FileLevelData.root)
}
inline std::string* FileLevelData::_internal_mutable_root() {
  
  return root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileLevelData::release_root() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileLevelData.root)
  
  return root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileLevelData::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileLevelData.root)
}

// map<string, .Tiny3D.Script.LevelSystem.Node> nodes = 2;
inline int FileLevelData::_internal_nodes_size() const {
  return nodes_.size();
}
inline int FileLevelData::nodes_size() const {
  return _internal_nodes_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >&
FileLevelData::_internal_nodes() const {
  return nodes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >&
FileLevelData::nodes() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.FileFormat.FileLevelData.nodes)
  return _internal_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >*
FileLevelData::_internal_mutable_nodes() {
  return nodes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::LevelSystem::Node >*
FileLevelData::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.FileFormat.FileLevelData.nodes)
  return _internal_mutable_nodes();
}

// map<string, .Tiny3D.Script.ModelSystem.MeshData> meshes = 3;
inline int FileLevelData::_internal_meshes_size() const {
  return meshes_.size();
}
inline int FileLevelData::meshes_size() const {
  return _internal_meshes_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >&
FileLevelData::_internal_meshes() const {
  return meshes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >&
FileLevelData::meshes() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.FileFormat.FileLevelData.meshes)
  return _internal_meshes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >*
FileLevelData::_internal_mutable_meshes() {
  return meshes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::MeshData >*
FileLevelData::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.FileFormat.FileLevelData.meshes)
  return _internal_mutable_meshes();
}

// map<string, .Tiny3D.Script.ModelSystem.AnimationClip> animations = 4;
inline int FileLevelData::_internal_animations_size() const {
  return animations_.size();
}
inline int FileLevelData::animations_size() const {
  return _internal_animations_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >&
FileLevelData::_internal_animations() const {
  return animations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >&
FileLevelData::animations() const {
  // @@protoc_insertion_point(field_map:Tiny3D.Script.FileFormat.FileLevelData.animations)
  return _internal_animations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >*
FileLevelData::_internal_mutable_animations() {
  return animations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Tiny3D::Script::ModelSystem::AnimationClip >*
FileLevelData::mutable_animations() {
  // @@protoc_insertion_point(field_mutable_map:Tiny3D.Script.FileFormat.FileLevelData.animations)
  return _internal_mutable_animations();
}

// -------------------------------------------------------------------

// FileLevel

// .Tiny3D.Script.FileFormat.FileHeader header = 1;
inline bool FileLevel::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FileLevel::has_header() const {
  return _internal_has_header();
}
inline void FileLevel::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Tiny3D::Script::FileFormat::FileHeader& FileLevel::_internal_header() const {
  const ::Tiny3D::Script::FileFormat::FileHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::FileFormat::FileHeader*>(
      &::Tiny3D::Script::FileFormat::_FileHeader_default_instance_);
}
inline const ::Tiny3D::Script::FileFormat::FileHeader& FileLevel::header() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileLevel.header)
  return _internal_header();
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileLevel::release_header() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileLevel.header)
  
  ::Tiny3D::Script::FileFormat::FileHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileLevel::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::Tiny3D::Script::FileFormat::FileHeader* FileLevel::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileLevel.header)
  return _internal_mutable_header();
}
inline void FileLevel::set_allocated_header(::Tiny3D::Script::FileFormat::FileHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileLevel.header)
}

// .Tiny3D.Script.FileFormat.FileLevelData data = 2;
inline bool FileLevel::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool FileLevel::has_data() const {
  return _internal_has_data();
}
inline void FileLevel::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::Tiny3D::Script::FileFormat::FileLevelData& FileLevel::_internal_data() const {
  const ::Tiny3D::Script::FileFormat::FileLevelData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::FileFormat::FileLevelData*>(
      &::Tiny3D::Script::FileFormat::_FileLevelData_default_instance_);
}
inline const ::Tiny3D::Script::FileFormat::FileLevelData& FileLevel::data() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.FileFormat.FileLevel.data)
  return _internal_data();
}
inline ::Tiny3D::Script::FileFormat::FileLevelData* FileLevel::release_data() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.FileFormat.FileLevel.data)
  
  ::Tiny3D::Script::FileFormat::FileLevelData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::FileFormat::FileLevelData* FileLevel::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::FileFormat::FileLevelData>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline ::Tiny3D::Script::FileFormat::FileLevelData* FileLevel::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.FileFormat.FileLevel.data)
  return _internal_mutable_data();
}
inline void FileLevel::set_allocated_data(::Tiny3D::Script::FileFormat::FileLevelData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.FileFormat.FileLevel.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FileFormat
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::FileFormat::FileHeader_FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::FileFormat::FileHeader_FileType>() {
  return ::Tiny3D::Script::FileFormat::FileHeader_FileType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FileScriptObject_2eproto
