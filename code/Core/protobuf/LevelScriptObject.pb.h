// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LevelScriptObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LevelScriptObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LevelScriptObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonScriptObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LevelScriptObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LevelScriptObject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LevelScriptObject_2eproto;
namespace Tiny3D {
namespace Script {
namespace LevelSystem {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
class Mesh;
class MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace LevelSystem
}  // namespace Script
}  // namespace Tiny3D
PROTOBUF_NAMESPACE_OPEN
template<> ::Tiny3D::Script::LevelSystem::Component* Arena::CreateMaybeMessage<::Tiny3D::Script::LevelSystem::Component>(Arena*);
template<> ::Tiny3D::Script::LevelSystem::Mesh* Arena::CreateMaybeMessage<::Tiny3D::Script::LevelSystem::Mesh>(Arena*);
template<> ::Tiny3D::Script::LevelSystem::Node* Arena::CreateMaybeMessage<::Tiny3D::Script::LevelSystem::Node>(Arena*);
template<> ::Tiny3D::Script::LevelSystem::Transform* Arena::CreateMaybeMessage<::Tiny3D::Script::LevelSystem::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Tiny3D {
namespace Script {
namespace LevelSystem {

enum Component_Type : int {
  Component_Type_Transform = 0,
  Component_Type_SkinnedMesh = 1,
  Component_Type_Component_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Component_Type_Component_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Component_Type_IsValid(int value);
constexpr Component_Type Component_Type_Type_MIN = Component_Type_Transform;
constexpr Component_Type Component_Type_Type_MAX = Component_Type_SkinnedMesh;
constexpr int Component_Type_Type_ARRAYSIZE = Component_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_Type_descriptor();
template<typename T>
inline const std::string& Component_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_Type_descriptor(), enum_t_value);
}
inline bool Component_Type_Parse(
    const std::string& name, Component_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_Type>(
    Component_Type_descriptor(), name, value);
}
// ===================================================================

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.LevelSystem.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.LevelSystem.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LevelScriptObject_2eproto);
    return ::descriptor_table_LevelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 3,
    kChildrenFieldNumber = 5,
    kUuidFieldNumber = 1,
    kNameFieldNumber = 2,
    kParentFieldNumber = 4,
  };
  // repeated .Tiny3D.Script.LevelSystem.Component components = 3;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::Tiny3D::Script::LevelSystem::Component* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::LevelSystem::Component >*
      mutable_components();
  private:
  const ::Tiny3D::Script::LevelSystem::Component& _internal_components(int index) const;
  ::Tiny3D::Script::LevelSystem::Component* _internal_add_components();
  public:
  const ::Tiny3D::Script::LevelSystem::Component& components(int index) const;
  ::Tiny3D::Script::LevelSystem::Component* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::LevelSystem::Component >&
      components() const;

  // repeated string children = 5;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  const std::string& children(int index) const;
  std::string* mutable_children(int index);
  void set_children(int index, const std::string& value);
  void set_children(int index, std::string&& value);
  void set_children(int index, const char* value);
  void set_children(int index, const char* value, size_t size);
  std::string* add_children();
  void add_children(const std::string& value);
  void add_children(std::string&& value);
  void add_children(const char* value);
  void add_children(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_children();
  private:
  const std::string& _internal_children(int index) const;
  std::string* _internal_add_children();
  public:

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string parent = 4;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.LevelSystem.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::LevelSystem::Component > components_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LevelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Component :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.LevelSystem.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  enum ComponentOneOfCase {
    kTransform = 2,
    kMesh = 3,
    COMPONENTONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.LevelSystem.Component";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LevelScriptObject_2eproto);
    return ::descriptor_table_LevelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_Type Type;
  static constexpr Type Transform =
    Component_Type_Transform;
  static constexpr Type SkinnedMesh =
    Component_Type_SkinnedMesh;
  static inline bool Type_IsValid(int value) {
    return Component_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Component_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Component_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Component_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Component_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Component_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Component_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTransformFieldNumber = 2,
    kMeshFieldNumber = 3,
  };
  // .Tiny3D.Script.LevelSystem.Component.Type type = 1;
  void clear_type();
  ::Tiny3D::Script::LevelSystem::Component_Type type() const;
  void set_type(::Tiny3D::Script::LevelSystem::Component_Type value);
  private:
  ::Tiny3D::Script::LevelSystem::Component_Type _internal_type() const;
  void _internal_set_type(::Tiny3D::Script::LevelSystem::Component_Type value);
  public:

  // .Tiny3D.Script.LevelSystem.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Tiny3D::Script::LevelSystem::Transform& transform() const;
  ::Tiny3D::Script::LevelSystem::Transform* release_transform();
  ::Tiny3D::Script::LevelSystem::Transform* mutable_transform();
  void set_allocated_transform(::Tiny3D::Script::LevelSystem::Transform* transform);
  private:
  const ::Tiny3D::Script::LevelSystem::Transform& _internal_transform() const;
  ::Tiny3D::Script::LevelSystem::Transform* _internal_mutable_transform();
  public:

  // .Tiny3D.Script.LevelSystem.Mesh mesh = 3;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::Tiny3D::Script::LevelSystem::Mesh& mesh() const;
  ::Tiny3D::Script::LevelSystem::Mesh* release_mesh();
  ::Tiny3D::Script::LevelSystem::Mesh* mutable_mesh();
  void set_allocated_mesh(::Tiny3D::Script::LevelSystem::Mesh* mesh);
  private:
  const ::Tiny3D::Script::LevelSystem::Mesh& _internal_mesh() const;
  ::Tiny3D::Script::LevelSystem::Mesh* _internal_mutable_mesh();
  public:

  void clear_ComponentOneOf();
  ComponentOneOfCase ComponentOneOf_case() const;
  // @@protoc_insertion_point(class_scope:Tiny3D.Script.LevelSystem.Component)
 private:
  class _Internal;
  void set_has_transform();
  void set_has_mesh();

  inline bool has_ComponentOneOf() const;
  inline void clear_has_ComponentOneOf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ComponentOneOfUnion {
    ComponentOneOfUnion() {}
    ::Tiny3D::Script::LevelSystem::Transform* transform_;
    ::Tiny3D::Script::LevelSystem::Mesh* mesh_;
  } ComponentOneOf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_LevelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.LevelSystem.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.LevelSystem.Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LevelScriptObject_2eproto);
    return ::descriptor_table_LevelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kScalingFieldNumber = 3,
  };
  // .Tiny3D.Script.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Tiny3D::Script::Vector3& position() const;
  ::Tiny3D::Script::Vector3* release_position();
  ::Tiny3D::Script::Vector3* mutable_position();
  void set_allocated_position(::Tiny3D::Script::Vector3* position);
  private:
  const ::Tiny3D::Script::Vector3& _internal_position() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_position();
  public:

  // .Tiny3D.Script.Vector3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Tiny3D::Script::Vector3& rotation() const;
  ::Tiny3D::Script::Vector3* release_rotation();
  ::Tiny3D::Script::Vector3* mutable_rotation();
  void set_allocated_rotation(::Tiny3D::Script::Vector3* rotation);
  private:
  const ::Tiny3D::Script::Vector3& _internal_rotation() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_rotation();
  public:

  // .Tiny3D.Script.Vector3 scaling = 3;
  bool has_scaling() const;
  private:
  bool _internal_has_scaling() const;
  public:
  void clear_scaling();
  const ::Tiny3D::Script::Vector3& scaling() const;
  ::Tiny3D::Script::Vector3* release_scaling();
  ::Tiny3D::Script::Vector3* mutable_scaling();
  void set_allocated_scaling(::Tiny3D::Script::Vector3* scaling);
  private:
  const ::Tiny3D::Script::Vector3& _internal_scaling() const;
  ::Tiny3D::Script::Vector3* _internal_mutable_scaling();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.LevelSystem.Transform)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Tiny3D::Script::Vector3* position_;
  ::Tiny3D::Script::Vector3* rotation_;
  ::Tiny3D::Script::Vector3* scaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LevelScriptObject_2eproto;
};
// -------------------------------------------------------------------

class Mesh :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Tiny3D.Script.LevelSystem.Mesh) */ {
 public:
  Mesh();
  virtual ~Mesh();

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mesh& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh* New() const final {
    return CreateMaybeMessage<Mesh>(nullptr);
  }

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Tiny3D.Script.LevelSystem.Mesh";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LevelScriptObject_2eproto);
    return ::descriptor_table_LevelScriptObject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:Tiny3D.Script.LevelSystem.Mesh)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LevelScriptObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// string uuid = 1;
inline void Node::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::uuid() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Node.uuid)
  return _internal_uuid();
}
inline void Node::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Node.uuid)
}
inline std::string* Node::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Node.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Node::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Node::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.LevelSystem.Node.uuid)
}
inline void Node::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.LevelSystem.Node.uuid)
}
inline void Node::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.LevelSystem.Node.uuid)
}
inline std::string* Node::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_uuid() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Node.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Node.uuid)
}

// string name = 2;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Node.name)
  return _internal_name();
}
inline void Node::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Node.name)
}
inline std::string* Node::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Node.name)
  return _internal_mutable_name();
}
inline const std::string& Node::_internal_name() const {
  return name_.GetNoArena();
}
inline void Node::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.LevelSystem.Node.name)
}
inline void Node::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.LevelSystem.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.LevelSystem.Node.name)
}
inline std::string* Node::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Node.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Node.name)
}

// repeated .Tiny3D.Script.LevelSystem.Component components = 3;
inline int Node::_internal_components_size() const {
  return components_.size();
}
inline int Node::components_size() const {
  return _internal_components_size();
}
inline void Node::clear_components() {
  components_.Clear();
}
inline ::Tiny3D::Script::LevelSystem::Component* Node::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Node.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::LevelSystem::Component >*
Node::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.LevelSystem.Node.components)
  return &components_;
}
inline const ::Tiny3D::Script::LevelSystem::Component& Node::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::Tiny3D::Script::LevelSystem::Component& Node::components(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Node.components)
  return _internal_components(index);
}
inline ::Tiny3D::Script::LevelSystem::Component* Node::_internal_add_components() {
  return components_.Add();
}
inline ::Tiny3D::Script::LevelSystem::Component* Node::add_components() {
  // @@protoc_insertion_point(field_add:Tiny3D.Script.LevelSystem.Node.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Tiny3D::Script::LevelSystem::Component >&
Node::components() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.LevelSystem.Node.components)
  return components_;
}

// string parent = 4;
inline void Node::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Node::parent() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Node.parent)
  return _internal_parent();
}
inline void Node::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Node.parent)
}
inline std::string* Node::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Node.parent)
  return _internal_mutable_parent();
}
inline const std::string& Node::_internal_parent() const {
  return parent_.GetNoArena();
}
inline void Node::_internal_set_parent(const std::string& value) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Node::set_parent(std::string&& value) {
  
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.LevelSystem.Node.parent)
}
inline void Node::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.LevelSystem.Node.parent)
}
inline void Node::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.LevelSystem.Node.parent)
}
inline std::string* Node::_internal_mutable_parent() {
  
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_parent() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Node.parent)
  
  return parent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Node.parent)
}

// repeated string children = 5;
inline int Node::_internal_children_size() const {
  return children_.size();
}
inline int Node::children_size() const {
  return _internal_children_size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline std::string* Node::add_children() {
  // @@protoc_insertion_point(field_add_mutable:Tiny3D.Script.LevelSystem.Node.children)
  return _internal_add_children();
}
inline const std::string& Node::_internal_children(int index) const {
  return children_.Get(index);
}
inline const std::string& Node::children(int index) const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Node.children)
  return _internal_children(index);
}
inline std::string* Node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Node.children)
  return children_.Mutable(index);
}
inline void Node::set_children(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Node.children)
  children_.Mutable(index)->assign(value);
}
inline void Node::set_children(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Node.children)
  children_.Mutable(index)->assign(std::move(value));
}
inline void Node::set_children(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  children_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.LevelSystem.Node.children)
}
inline void Node::set_children(int index, const char* value, size_t size) {
  children_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.LevelSystem.Node.children)
}
inline std::string* Node::_internal_add_children() {
  return children_.Add();
}
inline void Node::add_children(const std::string& value) {
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Tiny3D.Script.LevelSystem.Node.children)
}
inline void Node::add_children(std::string&& value) {
  children_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Tiny3D.Script.LevelSystem.Node.children)
}
inline void Node::add_children(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Tiny3D.Script.LevelSystem.Node.children)
}
inline void Node::add_children(const char* value, size_t size) {
  children_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Tiny3D.Script.LevelSystem.Node.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::children() const {
  // @@protoc_insertion_point(field_list:Tiny3D.Script.LevelSystem.Node.children)
  return children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:Tiny3D.Script.LevelSystem.Node.children)
  return &children_;
}

// -------------------------------------------------------------------

// Component

// .Tiny3D.Script.LevelSystem.Component.Type type = 1;
inline void Component::clear_type() {
  type_ = 0;
}
inline ::Tiny3D::Script::LevelSystem::Component_Type Component::_internal_type() const {
  return static_cast< ::Tiny3D::Script::LevelSystem::Component_Type >(type_);
}
inline ::Tiny3D::Script::LevelSystem::Component_Type Component::type() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Component.type)
  return _internal_type();
}
inline void Component::_internal_set_type(::Tiny3D::Script::LevelSystem::Component_Type value) {
  
  type_ = value;
}
inline void Component::set_type(::Tiny3D::Script::LevelSystem::Component_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Component.type)
}

// .Tiny3D.Script.LevelSystem.Transform transform = 2;
inline bool Component::_internal_has_transform() const {
  return ComponentOneOf_case() == kTransform;
}
inline bool Component::has_transform() const {
  return _internal_has_transform();
}
inline void Component::set_has_transform() {
  _oneof_case_[0] = kTransform;
}
inline void Component::clear_transform() {
  if (_internal_has_transform()) {
    delete ComponentOneOf_.transform_;
    clear_has_ComponentOneOf();
  }
}
inline ::Tiny3D::Script::LevelSystem::Transform* Component::release_transform() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Component.transform)
  if (_internal_has_transform()) {
    clear_has_ComponentOneOf();
      ::Tiny3D::Script::LevelSystem::Transform* temp = ComponentOneOf_.transform_;
    ComponentOneOf_.transform_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::LevelSystem::Transform& Component::_internal_transform() const {
  return _internal_has_transform()
      ? *ComponentOneOf_.transform_
      : *reinterpret_cast< ::Tiny3D::Script::LevelSystem::Transform*>(&::Tiny3D::Script::LevelSystem::_Transform_default_instance_);
}
inline const ::Tiny3D::Script::LevelSystem::Transform& Component::transform() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Component.transform)
  return _internal_transform();
}
inline ::Tiny3D::Script::LevelSystem::Transform* Component::_internal_mutable_transform() {
  if (!_internal_has_transform()) {
    clear_ComponentOneOf();
    set_has_transform();
    ComponentOneOf_.transform_ = CreateMaybeMessage< ::Tiny3D::Script::LevelSystem::Transform >(
        GetArenaNoVirtual());
  }
  return ComponentOneOf_.transform_;
}
inline ::Tiny3D::Script::LevelSystem::Transform* Component::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Component.transform)
  return _internal_mutable_transform();
}

// .Tiny3D.Script.LevelSystem.Mesh mesh = 3;
inline bool Component::_internal_has_mesh() const {
  return ComponentOneOf_case() == kMesh;
}
inline bool Component::has_mesh() const {
  return _internal_has_mesh();
}
inline void Component::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline void Component::clear_mesh() {
  if (_internal_has_mesh()) {
    delete ComponentOneOf_.mesh_;
    clear_has_ComponentOneOf();
  }
}
inline ::Tiny3D::Script::LevelSystem::Mesh* Component::release_mesh() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Component.mesh)
  if (_internal_has_mesh()) {
    clear_has_ComponentOneOf();
      ::Tiny3D::Script::LevelSystem::Mesh* temp = ComponentOneOf_.mesh_;
    ComponentOneOf_.mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Tiny3D::Script::LevelSystem::Mesh& Component::_internal_mesh() const {
  return _internal_has_mesh()
      ? *ComponentOneOf_.mesh_
      : *reinterpret_cast< ::Tiny3D::Script::LevelSystem::Mesh*>(&::Tiny3D::Script::LevelSystem::_Mesh_default_instance_);
}
inline const ::Tiny3D::Script::LevelSystem::Mesh& Component::mesh() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Component.mesh)
  return _internal_mesh();
}
inline ::Tiny3D::Script::LevelSystem::Mesh* Component::_internal_mutable_mesh() {
  if (!_internal_has_mesh()) {
    clear_ComponentOneOf();
    set_has_mesh();
    ComponentOneOf_.mesh_ = CreateMaybeMessage< ::Tiny3D::Script::LevelSystem::Mesh >(
        GetArenaNoVirtual());
  }
  return ComponentOneOf_.mesh_;
}
inline ::Tiny3D::Script::LevelSystem::Mesh* Component::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Component.mesh)
  return _internal_mutable_mesh();
}

inline bool Component::has_ComponentOneOf() const {
  return ComponentOneOf_case() != COMPONENTONEOF_NOT_SET;
}
inline void Component::clear_has_ComponentOneOf() {
  _oneof_case_[0] = COMPONENTONEOF_NOT_SET;
}
inline Component::ComponentOneOfCase Component::ComponentOneOf_case() const {
  return Component::ComponentOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transform

// .Tiny3D.Script.Vector3 position = 1;
inline bool Transform::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Transform::has_position() const {
  return _internal_has_position();
}
inline const ::Tiny3D::Script::Vector3& Transform::_internal_position() const {
  const ::Tiny3D::Script::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Transform::position() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Transform.position)
  return _internal_position();
}
inline ::Tiny3D::Script::Vector3* Transform::release_position() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Transform.position)
  
  ::Tiny3D::Script::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Transform::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::Tiny3D::Script::Vector3* Transform::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Transform.position)
  return _internal_mutable_position();
}
inline void Transform::set_allocated_position(::Tiny3D::Script::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Transform.position)
}

// .Tiny3D.Script.Vector3 rotation = 2;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Tiny3D::Script::Vector3& Transform::_internal_rotation() const {
  const ::Tiny3D::Script::Vector3* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Transform.rotation)
  return _internal_rotation();
}
inline ::Tiny3D::Script::Vector3* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Transform.rotation)
  
  ::Tiny3D::Script::Vector3* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Tiny3D::Script::Vector3* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::Tiny3D::Script::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Transform.rotation)
}

// .Tiny3D.Script.Vector3 scaling = 3;
inline bool Transform::_internal_has_scaling() const {
  return this != internal_default_instance() && scaling_ != nullptr;
}
inline bool Transform::has_scaling() const {
  return _internal_has_scaling();
}
inline const ::Tiny3D::Script::Vector3& Transform::_internal_scaling() const {
  const ::Tiny3D::Script::Vector3* p = scaling_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Tiny3D::Script::Vector3*>(
      &::Tiny3D::Script::_Vector3_default_instance_);
}
inline const ::Tiny3D::Script::Vector3& Transform::scaling() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Transform.scaling)
  return _internal_scaling();
}
inline ::Tiny3D::Script::Vector3* Transform::release_scaling() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Transform.scaling)
  
  ::Tiny3D::Script::Vector3* temp = scaling_;
  scaling_ = nullptr;
  return temp;
}
inline ::Tiny3D::Script::Vector3* Transform::_internal_mutable_scaling() {
  
  if (scaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::Tiny3D::Script::Vector3>(GetArenaNoVirtual());
    scaling_ = p;
  }
  return scaling_;
}
inline ::Tiny3D::Script::Vector3* Transform::mutable_scaling() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Transform.scaling)
  return _internal_mutable_scaling();
}
inline void Transform::set_allocated_scaling(::Tiny3D::Script::Vector3* scaling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scaling_);
  }
  if (scaling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scaling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaling, submessage_arena);
    }
    
  } else {
    
  }
  scaling_ = scaling;
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Transform.scaling)
}

// -------------------------------------------------------------------

// Mesh

// string uuid = 1;
inline void Mesh::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Mesh::uuid() const {
  // @@protoc_insertion_point(field_get:Tiny3D.Script.LevelSystem.Mesh.uuid)
  return _internal_uuid();
}
inline void Mesh::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Tiny3D.Script.LevelSystem.Mesh.uuid)
}
inline std::string* Mesh::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Tiny3D.Script.LevelSystem.Mesh.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Mesh::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void Mesh::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Mesh::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tiny3D.Script.LevelSystem.Mesh.uuid)
}
inline void Mesh::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tiny3D.Script.LevelSystem.Mesh.uuid)
}
inline void Mesh::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tiny3D.Script.LevelSystem.Mesh.uuid)
}
inline std::string* Mesh::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mesh::release_uuid() {
  // @@protoc_insertion_point(field_release:Tiny3D.Script.LevelSystem.Mesh.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mesh::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:Tiny3D.Script.LevelSystem.Mesh.uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LevelSystem
}  // namespace Script
}  // namespace Tiny3D

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Tiny3D::Script::LevelSystem::Component_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Tiny3D::Script::LevelSystem::Component_Type>() {
  return ::Tiny3D::Script::LevelSystem::Component_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LevelScriptObject_2eproto
